/* The following code was generated by JFlex 1.4.3 on 11/20/12 3:29 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Java file
 */

package org.opensolaris.opengrok.analysis.vb;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/20/12 3:29 PM from the specification file
 * <tt>/home/mssun/Desktop/opengrok-dev/src/org/opensolaris/opengrok/analysis/vb/VBXref.lex</tt>
 */
public class VBXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\35"+
    "\1\41\2\6\1\40\1\36\2\41\1\6\1\31\1\6\1\10\1\11"+
    "\1\24\1\25\11\5\1\44\1\6\1\33\1\6\1\34\1\6\1\45"+
    "\1\22\1\13\1\14\1\27\1\30\1\17\1\4\1\42\3\4\1\15"+
    "\1\21\2\4\1\43\1\4\1\20\1\16\1\23\1\32\1\12\1\4"+
    "\1\26\2\4\1\41\1\37\2\41\1\7\1\41\1\22\1\13\1\14"+
    "\1\27\1\30\1\17\1\4\1\42\3\4\1\15\1\21\2\4\1\43"+
    "\1\4\1\20\1\16\1\23\1\32\1\12\1\4\1\26\2\4\3\41"+
    "\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\2\3\1\4\1\5\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\4\4\1\6\1\13"+
    "\2\4\1\2\2\14\1\15\1\0\1\5\14\0\1\16"+
    "\1\17\1\0\2\5\1\0\1\5\12\0\1\2\1\0"+
    "\1\5\5\0\1\20\3\0\1\21\10\0\1\20\1\22"+
    "\2\0\1\23\2\0\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\162\0\344"+
    "\0\u010a\0\162\0\u0130\0\u0156\0\162\0\162\0\162\0\162"+
    "\0\u017c\0\u01a2\0\u01c8\0\u01ee\0\162\0\u0214\0\u023a\0\u0260"+
    "\0\u0286\0\u02ac\0\162\0\344\0\u02d2\0\u02f8\0\u031e\0\u0344"+
    "\0\u036a\0\u0390\0\u017c\0\u03b6\0\u03dc\0\u0402\0\u01a2\0\u0428"+
    "\0\u044e\0\u0474\0\162\0\162\0\u049a\0\u04c0\0\u04e6\0\u050c"+
    "\0\u0532\0\u0558\0\u057e\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c"+
    "\0\u0662\0\u0688\0\u06ae\0\162\0\u06d4\0\u06fa\0\u0720\0\u0746"+
    "\0\u076c\0\u0792\0\u07b8\0\u07de\0\u07de\0\u0804\0\u082a\0\u0850"+
    "\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934\0\u095a\0\u0980"+
    "\0\u017c\0\u0876\0\u09a6\0\u09cc\0\162\0\u09f2\0\u0a18\0\u0a18";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\10"+
    "\2\12\12\10\1\12\1\13\3\10\1\12\1\10\1\14"+
    "\1\15\1\16\1\17\1\12\1\20\1\12\2\10\2\12"+
    "\1\4\1\5\1\6\1\7\1\21\1\22\1\12\3\22"+
    "\5\21\1\23\4\21\1\24\1\22\3\21\1\12\1\21"+
    "\1\25\1\15\1\26\1\12\1\27\1\20\1\12\1\30"+
    "\1\21\2\12\1\4\1\31\1\32\1\33\1\21\1\22"+
    "\1\12\3\22\5\21\1\23\4\21\1\24\1\22\3\21"+
    "\1\12\1\21\1\25\1\15\3\12\1\20\1\12\1\30"+
    "\1\21\2\12\47\0\1\5\1\6\1\7\45\0\1\7"+
    "\46\0\2\34\1\0\1\34\2\0\12\34\1\0\4\34"+
    "\1\0\1\34\7\0\2\34\7\0\1\11\3\0\1\35"+
    "\3\0\1\36\1\0\1\36\5\0\1\11\1\0\1\36"+
    "\1\37\1\0\1\36\20\0\1\11\3\0\1\35\3\0"+
    "\1\36\1\0\1\36\5\0\1\11\1\40\1\36\1\37"+
    "\1\0\1\36\17\0\1\41\5\0\12\41\1\42\1\0"+
    "\3\41\1\0\1\41\7\0\2\41\6\0\2\43\1\0"+
    "\2\43\1\44\12\43\1\45\4\43\1\0\1\43\7\0"+
    "\2\43\1\0\1\46\4\0\2\47\1\0\15\47\1\0"+
    "\4\47\1\0\1\47\7\0\2\47\1\0\1\46\4\0"+
    "\2\43\1\0\2\43\1\44\11\43\1\50\1\45\4\43"+
    "\1\0\1\43\7\0\2\43\1\0\1\46\4\0\1\51"+
    "\5\0\12\51\2\0\3\51\1\0\1\51\7\0\2\51"+
    "\3\0\1\52\101\0\1\53\1\0\1\54\12\0\2\43"+
    "\1\0\2\43\1\44\11\43\1\55\1\45\4\43\1\0"+
    "\1\43\7\0\2\43\1\0\1\46\1\0\1\31\1\32"+
    "\1\33\45\0\1\33\47\0\1\56\17\0\1\56\35\0"+
    "\1\36\1\0\1\36\7\0\1\36\2\0\1\36\20\0"+
    "\1\57\2\0\1\60\14\0\1\57\3\0\1\60\21\0"+
    "\1\61\5\0\2\61\2\0\1\61\2\0\1\61\2\0"+
    "\1\61\1\0\2\61\21\0\2\41\1\0\2\41\1\62"+
    "\12\41\1\63\4\41\1\0\1\41\7\0\2\41\6\0"+
    "\1\64\5\0\12\64\2\0\3\64\1\0\1\64\7\0"+
    "\2\64\6\0\2\43\1\0\2\43\1\44\1\65\1\66"+
    "\1\67\2\43\1\70\4\43\1\45\4\43\1\0\1\43"+
    "\7\0\2\43\1\0\1\46\4\0\1\71\5\0\12\71"+
    "\2\0\3\71\1\0\1\71\7\0\2\71\6\0\2\72"+
    "\1\0\15\72\1\0\4\72\1\0\1\72\7\0\2\72"+
    "\6\0\2\43\1\0\2\43\1\44\12\43\1\45\4\43"+
    "\1\0\1\43\7\0\1\43\1\73\1\0\1\46\4\0"+
    "\2\51\1\0\15\51\1\45\4\51\1\0\1\51\7\0"+
    "\2\51\3\0\1\52\33\0\1\74\14\0\2\43\1\0"+
    "\2\43\1\44\11\43\1\75\1\45\4\43\1\0\1\43"+
    "\7\0\2\43\1\0\1\46\5\0\1\56\7\0\1\36"+
    "\1\0\1\36\5\0\1\56\1\0\1\36\1\37\1\0"+
    "\1\36\20\0\1\57\7\0\1\36\1\0\1\36\5\0"+
    "\1\57\1\0\1\36\2\0\1\36\20\0\1\57\17\0"+
    "\1\57\25\0\1\61\5\0\2\61\1\36\1\0\1\61"+
    "\2\0\1\61\2\0\1\61\1\0\1\61\1\76\1\0"+
    "\1\36\17\0\2\41\1\0\2\41\1\62\1\77\1\100"+
    "\1\101\2\41\1\102\4\41\1\63\4\41\1\0\1\41"+
    "\7\0\2\41\6\0\1\103\5\0\12\103\2\0\3\103"+
    "\1\0\1\103\7\0\2\103\6\0\2\64\1\0\15\64"+
    "\1\63\4\64\1\0\1\64\7\0\2\64\6\0\2\43"+
    "\1\0\2\43\1\44\1\43\1\104\10\43\1\45\4\43"+
    "\1\0\1\43\7\0\2\43\1\0\1\46\4\0\2\43"+
    "\1\0\2\43\1\44\10\43\1\105\1\43\1\45\4\43"+
    "\1\0\1\43\7\0\2\43\1\0\1\46\4\0\2\43"+
    "\1\0\2\43\1\44\3\43\1\105\5\43\1\106\1\45"+
    "\4\43\1\0\1\43\7\0\2\43\1\0\1\46\4\0"+
    "\2\43\1\0\2\43\1\44\6\43\1\107\3\43\1\45"+
    "\4\43\1\0\1\43\7\0\2\43\1\0\1\46\4\0"+
    "\2\110\1\0\3\71\12\110\1\0\4\110\1\0\1\110"+
    "\7\0\2\110\6\0\2\72\1\0\2\72\1\111\12\72"+
    "\1\0\4\72\1\0\1\72\7\0\2\72\6\0\2\43"+
    "\1\0\2\43\1\44\12\43\1\45\4\43\1\0\1\43"+
    "\7\0\2\43\1\112\1\46\4\0\2\43\1\0\2\43"+
    "\1\44\12\43\1\45\4\43\1\0\1\43\7\0\1\43"+
    "\1\113\1\0\1\46\5\0\1\61\2\0\1\60\2\0"+
    "\2\61\1\36\1\0\1\61\2\0\1\61\2\0\1\61"+
    "\1\0\1\61\1\76\1\60\1\36\17\0\2\41\1\0"+
    "\2\41\1\62\1\41\1\114\10\41\1\63\4\41\1\0"+
    "\1\41\7\0\2\41\6\0\2\41\1\0\2\41\1\62"+
    "\10\41\1\115\1\41\1\63\4\41\1\0\1\41\7\0"+
    "\2\41\6\0\2\41\1\0\2\41\1\62\3\41\1\115"+
    "\5\41\1\116\1\63\4\41\1\0\1\41\7\0\2\41"+
    "\6\0\2\41\1\0\2\41\1\62\6\41\1\117\3\41"+
    "\1\63\4\41\1\0\1\41\7\0\2\41\6\0\2\120"+
    "\1\0\3\103\12\120\1\0\4\120\1\0\1\120\7\0"+
    "\2\120\6\0\2\43\1\0\2\43\1\44\4\43\1\121"+
    "\5\43\1\45\4\43\1\0\1\43\7\0\2\43\1\0"+
    "\1\46\4\0\2\43\1\0\2\43\1\44\3\43\1\121"+
    "\6\43\1\45\4\43\1\0\1\43\7\0\2\43\1\0"+
    "\1\46\4\0\2\43\1\0\2\43\1\44\7\43\1\121"+
    "\2\43\1\45\4\43\1\0\1\43\7\0\2\43\1\0"+
    "\1\46\4\0\2\110\1\0\3\71\12\110\1\45\4\110"+
    "\1\0\1\110\7\0\2\110\6\0\2\122\1\0\15\122"+
    "\1\0\4\122\1\0\1\122\7\0\2\122\26\0\1\123"+
    "\25\0\2\43\1\0\2\43\1\44\4\43\1\73\5\43"+
    "\1\45\4\43\1\0\1\43\7\0\2\43\1\112\1\46"+
    "\4\0\2\41\1\0\2\41\1\62\4\41\1\124\5\41"+
    "\1\63\4\41\1\0\1\41\1\0\1\125\5\0\2\41"+
    "\6\0\2\41\1\0\2\41\1\62\4\41\1\124\5\41"+
    "\1\63\4\41\1\0\1\41\7\0\2\41\6\0\2\41"+
    "\1\0\2\41\1\62\3\41\1\124\6\41\1\63\4\41"+
    "\1\0\1\41\7\0\2\41\6\0\2\41\1\0\2\41"+
    "\1\62\7\41\1\124\2\41\1\63\4\41\1\0\1\41"+
    "\7\0\2\41\6\0\2\120\1\0\3\103\12\120\1\63"+
    "\4\120\1\0\1\120\1\0\1\125\5\0\2\120\26\0"+
    "\1\126\25\0\2\41\1\0\2\41\1\62\12\41\1\63"+
    "\4\41\1\0\1\41\1\0\1\125\5\0\2\41\6\0"+
    "\27\127\4\0\2\127\1\0\4\127\4\0\2\130\4\127"+
    "\17\130\1\127\1\130\4\0\2\127\1\0\2\130\2\127";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2622];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\2\1\1\11\2\1\4\11"+
    "\4\1\1\11\5\1\1\11\1\1\1\0\1\1\14\0"+
    "\2\11\1\0\2\1\1\0\1\1\12\0\1\11\1\0"+
    "\1\1\5\0\1\1\3\0\1\1\10\0\2\1\2\0"+
    "\1\11\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* Must match WhiteSpace regex */
  private final static String WHITE_SPACE = "[ \t\f\r]+";

  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VBXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public VBXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { yybegin(COMMENT);out.write("<span class=\"c\">\'");
          }
        case 21: break;
        case 5: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 22: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 23: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
          }
        case 24: break;
        case 19: 
          { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
          }
        case 25: break;
        case 15: 
          { out.write("\\\\");
          }
        case 26: break;
        case 8: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 27: break;
        case 11: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 28: break;
        case 16: 
          { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
          }
        case 29: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 30: break;
        case 10: 
          { out.write( "&amp;");
          }
        case 31: break;
        case 6: 
          { out.write( "&lt;");
          }
        case 32: break;
        case 18: 
          { writeEMailAddress(yytext());
          }
        case 33: break;
        case 3: 
          { startNewLine();
          }
        case 34: break;
        case 14: 
          { yybegin(YYINITIAL); out.write("\\\"</span>");
          }
        case 35: break;
        case 2: 
          { out.write(yytext());
          }
        case 36: break;
        case 7: 
          { out.write( "&gt;");
          }
        case 37: break;
        case 17: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 38: break;
        case 13: 
          { String id = yytext();
    writeSymbol(id, Consts.getReservedKeywords(), yyline);
          }
        case 39: break;
        case 20: 
          { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
