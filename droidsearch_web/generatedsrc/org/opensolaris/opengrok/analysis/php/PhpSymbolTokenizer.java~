/* The following code was generated by JFlex 1.4.3 on 10/25/12 4:28 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Gets Php symbols - ignores comments, strings, keywords
 */

package org.opensolaris.opengrok.analysis.php;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.analysis.JFlexTokenizer;
import org.opensolaris.opengrok.web.Util;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/25/12 4:28 PM from the specification file
 * <tt>/home/mssun/Desktop/opengrok-dev/src/org/opensolaris/opengrok/analysis/php/PhpSymbolTokenizer.lex</tt>
 */
public class PhpSymbolTokenizer extends JFlexTokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int DOCCOMMENT = 22;
  public static final int SCOMMENT = 6;
  public static final int QSTRING = 14;
  public static final int DOCCOM_TYPE = 28;
  public static final int HEREDOC = 8;
  public static final int STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int DOCCOM_TYPE_THEN_NAME = 24;
  public static final int DOCCOM_NAME = 26;
  public static final int STRINGEXPR = 18;
  public static final int IN_SCRIPT = 2;
  public static final int BACKQUOTE = 16;
  public static final int NOWDOC = 10;
  public static final int COMMENT = 12;
  public static final int STRINGVAR = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  5,  6,  7,  8,  8,  9,  9, 
    10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\6\1\71\1\73"+
    "\1\54\2\6\1\63\1\67\1\70\1\64\1\40\1\6\1\11\1\12"+
    "\1\30\1\31\1\34\1\35\1\15\1\15\3\35\2\5\1\102\1\76"+
    "\1\41\1\43\1\44\1\42\1\101\1\27\1\33\1\24\1\25\1\37"+
    "\1\26\1\45\1\14\1\22\1\52\1\10\1\21\1\20\1\23\1\47"+
    "\1\13\1\10\1\46\1\16\1\17\1\50\1\66\1\65\1\36\1\51"+
    "\1\10\1\77\1\53\1\100\1\0\1\7\1\72\1\27\1\33\1\24"+
    "\1\25\1\61\1\60\1\45\1\14\1\22\1\52\1\10\1\21\1\20"+
    "\1\57\1\47\1\13\1\10\1\62\1\16\1\56\1\50\1\55\1\65"+
    "\1\36\1\51\1\10\1\74\1\32\1\75\1\6\u1081\4\uef00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\20\0\11\1\1\2\5\1\1\2\3\1\1\3\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12"+
    "\2\1\1\12\11\1\1\13\1\14\5\15\2\1\1\16"+
    "\1\17\1\20\1\16\10\0\1\7\1\1\2\0\1\21"+
    "\4\0\1\22\1\23\12\0\1\1\1\0\1\24\1\25"+
    "\2\26\16\0\1\27\10\0\1\1\1\0\1\30\2\1"+
    "\13\0\2\1\2\0\1\31\1\32\2\0\1\33\17\0"+
    "\1\1\25\0\1\34\10\0\2\1\4\0\2\35\34\0"+
    "\1\36\14\0\1\37\1\1\1\40\13\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa\0\u03ed"+
    "\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605"+
    "\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da\0\u081d"+
    "\0\u0860\0\u08a3\0\u08e6\0\u0430\0\u0929\0\u0430\0\u0430\0\u0430"+
    "\0\u0430\0\u0430\0\u096c\0\u09af\0\u0430\0\u09f2\0\u0a35\0\u0a78"+
    "\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90"+
    "\0\u0cd3\0\u0d16\0\u0430\0\u0430\0\u0473\0\u04b6\0\u0d59\0\u0d9c"+
    "\0\u0ddf\0\u0e22\0\u0430\0\u0e65\0\u0ea8\0\u0eeb\0\u04f9\0\u0f2e"+
    "\0\u053c\0\u0f71\0\u0fb4\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103"+
    "\0\u1146\0\u0754\0\u1189\0\u11cc\0\u120f\0\u0860\0\u1252\0\u0430"+
    "\0\u1295\0\u0929\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u0430\0\u0430\0\u15b9"+
    "\0\u0430\0\u0afe\0\u15fc\0\u0b41\0\u0b84\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b38\0\u0430\0\u11cc\0\u120f\0\u1b7b\0\u1bbe\0\u1c01"+
    "\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19"+
    "\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u0430\0\u1fab\0\u1fee"+
    "\0\u0430\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3"+
    "\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db"+
    "\0\u241e\0\u2461\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3"+
    "\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b"+
    "\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u0430\0\u29e0"+
    "\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72\0\u2bb5\0\u22cf"+
    "\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u0430\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3177\0\u31ba"+
    "\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f\0\u33d2"+
    "\0\u3415\0\u3458\0\u349b\0\u30f1\0\u34de\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u35a7\0\u35ea\0\u36b3\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e"+
    "\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\2\21\1\24\1\21\1\24\1\25"+
    "\2\24\1\25\1\26\1\24\10\25\1\27\1\25\1\30"+
    "\1\24\1\21\1\25\2\24\2\25\1\21\1\31\3\21"+
    "\6\25\2\21\3\25\1\27\2\25\2\21\2\25\15\21"+
    "\1\22\1\23\1\21\1\32\1\33\1\21\2\32\1\34"+
    "\1\35\2\32\1\33\12\32\1\36\1\37\1\21\1\40"+
    "\2\33\2\32\1\34\1\41\1\42\2\21\6\32\1\21"+
    "\1\43\6\32\1\44\1\21\2\32\1\45\1\21\1\46"+
    "\1\47\1\50\1\51\1\52\6\21\1\22\1\23\2\21"+
    "\1\24\1\21\1\24\1\25\2\24\1\25\1\26\1\24"+
    "\10\25\1\27\1\25\1\30\1\24\1\21\1\25\2\24"+
    "\2\25\5\21\6\25\1\53\1\54\3\25\1\27\2\25"+
    "\2\21\2\25\2\21\1\55\2\21\1\56\7\21\1\57"+
    "\1\60\1\55\1\21\1\24\1\21\1\24\1\25\2\24"+
    "\1\25\1\26\1\24\10\25\1\27\1\25\1\30\1\24"+
    "\1\21\1\25\2\24\2\25\2\21\1\42\2\21\6\25"+
    "\2\21\3\25\1\27\2\25\2\21\2\25\15\21\1\22"+
    "\1\23\2\21\1\24\1\21\1\24\1\25\2\24\1\25"+
    "\1\26\1\24\10\25\1\27\1\25\1\30\1\24\1\21"+
    "\1\25\2\24\2\25\5\21\6\25\1\61\1\54\3\25"+
    "\1\27\2\25\2\21\2\25\5\21\1\56\7\21\1\22"+
    "\1\23\1\21\1\62\1\24\1\21\1\63\1\64\2\24"+
    "\1\64\1\65\1\24\10\64\1\66\1\64\1\30\1\24"+
    "\1\21\1\64\2\24\2\64\5\21\6\64\1\61\1\54"+
    "\3\64\1\66\2\64\2\21\2\64\5\21\1\56\7\21"+
    "\1\22\1\23\2\21\1\24\1\21\1\24\1\25\2\24"+
    "\1\25\1\26\1\24\10\25\1\27\1\25\1\30\1\24"+
    "\1\21\1\25\2\24\2\25\5\21\6\25\2\21\3\25"+
    "\1\27\2\25\2\21\2\25\15\21\1\22\1\23\1\21"+
    "\1\62\1\24\1\21\1\63\1\64\2\24\1\64\1\65"+
    "\1\24\10\64\1\66\1\64\1\30\1\24\1\21\1\64"+
    "\2\24\2\64\5\21\6\64\2\21\3\64\1\66\2\64"+
    "\2\21\2\64\15\21\1\22\1\23\2\21\1\24\1\21"+
    "\1\24\1\25\2\24\1\25\1\26\1\24\10\25\1\27"+
    "\1\25\1\30\1\24\1\21\1\25\2\24\2\25\5\21"+
    "\6\25\2\21\3\25\1\27\2\25\1\21\1\67\2\25"+
    "\15\21\1\22\1\23\2\21\1\24\1\21\1\24\1\25"+
    "\2\24\1\25\1\26\1\24\10\25\1\27\1\25\1\30"+
    "\1\24\1\21\1\25\2\24\2\25\5\21\6\25\1\70"+
    "\1\21\3\25\1\27\2\25\1\55\1\21\2\25\15\21"+
    "\1\22\1\23\2\21\1\24\1\21\1\24\1\25\2\24"+
    "\1\25\1\26\1\24\10\25\1\27\1\25\1\30\1\24"+
    "\1\21\1\25\2\24\2\25\5\21\6\25\1\71\1\54"+
    "\3\25\1\27\2\25\2\21\2\25\3\21\1\55\1\21"+
    "\1\56\7\21\1\22\1\23\1\21\1\72\2\21\2\72"+
    "\2\21\2\72\1\21\12\72\3\21\1\72\2\21\2\72"+
    "\5\21\6\72\2\21\6\72\2\21\2\72\6\21\1\55"+
    "\1\21\1\73\3\21\1\74\1\75\1\76\1\74\1\72"+
    "\2\74\2\72\1\77\1\74\2\72\1\74\12\72\3\74"+
    "\1\72\2\74\2\72\5\74\6\72\2\74\6\72\2\74"+
    "\2\72\10\74\1\100\3\74\1\21\1\101\1\23\2\21"+
    "\1\24\1\21\1\24\1\25\2\24\1\25\1\26\1\24"+
    "\10\25\1\27\1\25\1\30\1\24\1\21\1\25\2\24"+
    "\2\25\5\21\6\25\2\21\3\25\1\27\2\25\1\21"+
    "\1\102\2\25\14\21\1\103\1\104\2\103\1\105\2\103"+
    "\2\105\2\103\2\105\1\103\12\105\2\103\1\21\1\105"+
    "\2\103\2\105\5\103\6\105\2\103\6\105\2\103\2\105"+
    "\2\21\6\103\2\21\56\103\1\106\26\103\104\0\1\22"+
    "\1\23\1\21\102\0\1\21\104\0\1\107\1\0\21\107"+
    "\1\0\1\107\1\0\5\107\5\0\6\107\2\0\6\107"+
    "\2\0\2\107\12\0\1\110\6\0\1\111\1\0\3\111"+
    "\1\112\15\111\1\113\1\111\1\0\5\111\5\0\6\111"+
    "\2\0\6\111\2\0\2\111\12\0\1\110\6\0\1\111"+
    "\1\0\3\111\1\112\4\111\1\114\10\111\1\113\1\111"+
    "\1\0\5\111\5\0\6\111\2\0\1\111\1\114\4\111"+
    "\2\0\2\111\12\0\1\110\6\0\1\111\1\0\3\111"+
    "\1\112\4\111\1\115\10\111\1\113\1\111\1\0\5\111"+
    "\5\0\6\111\2\0\1\111\1\115\4\111\2\0\2\111"+
    "\12\0\1\110\11\0\1\116\2\0\2\116\1\0\12\116"+
    "\3\0\1\116\2\0\2\116\5\0\6\116\2\0\6\116"+
    "\2\0\2\116\56\0\1\117\44\0\2\32\1\0\2\32"+
    "\2\0\15\32\1\0\1\32\1\0\5\32\5\0\6\32"+
    "\2\0\6\32\2\0\2\32\21\0\1\33\4\0\1\120"+
    "\2\0\1\33\13\0\1\33\2\0\2\33\1\0\1\121"+
    "\21\0\1\121\26\0\1\33\4\0\1\122\2\0\1\33"+
    "\13\0\1\37\2\0\2\33\52\0\1\120\7\0\1\120"+
    "\13\0\1\120\2\0\2\120\75\0\1\50\33\0\1\123"+
    "\23\0\1\33\4\0\1\120\2\0\1\33\13\0\1\33"+
    "\2\124\2\33\1\125\1\121\21\0\1\121\25\0\2\32"+
    "\1\0\2\32\2\0\15\32\1\0\1\32\1\0\5\32"+
    "\1\0\1\126\3\0\6\32\2\0\6\32\1\44\1\0"+
    "\2\32\2\0\1\46\52\0\1\127\105\0\1\130\42\0"+
    "\1\131\2\0\2\131\2\0\2\131\1\0\12\131\3\0"+
    "\1\131\2\0\2\131\5\0\6\131\2\0\6\131\2\0"+
    "\2\131\15\0\1\132\14\0\1\133\3\0\1\134\2\0"+
    "\1\135\1\136\1\137\3\0\1\140\12\0\1\141\1\142"+
    "\1\143\7\0\1\136\1\0\1\141\35\0\1\144\13\0"+
    "\1\144\2\0\2\144\1\145\14\0\10\21\6\0\1\21"+
    "\2\0\1\21\102\0\1\146\62\0\1\147\27\0\1\57"+
    "\1\60\1\55\102\0\1\55\114\0\1\144\13\0\1\144"+
    "\2\0\2\144\1\145\14\0\10\21\11\0\1\21\10\0"+
    "\1\150\1\151\2\152\1\0\2\152\2\0\15\152\1\0"+
    "\1\152\1\0\5\152\5\0\6\152\2\0\6\152\2\0"+
    "\2\152\7\0\1\153\6\0\1\150\1\151\1\152\1\154"+
    "\1\0\2\154\2\107\15\154\1\0\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\6\154\2\0\2\154\7\0\1\153"+
    "\2\0\1\110\3\0\1\150\1\151\1\152\1\155\1\0"+
    "\2\155\1\111\1\112\15\155\1\113\1\155\1\0\5\155"+
    "\5\0\6\155\2\0\6\155\2\0\2\155\7\0\1\153"+
    "\2\0\1\110\3\0\1\150\1\151\1\152\1\155\1\0"+
    "\2\155\1\111\1\112\4\155\1\156\10\155\1\113\1\155"+
    "\1\0\5\155\5\0\6\155\2\0\1\155\1\156\4\155"+
    "\2\0\2\155\7\0\1\153\2\0\1\110\3\0\1\150"+
    "\1\151\1\152\1\155\1\0\2\155\1\111\1\112\4\155"+
    "\1\157\10\155\1\113\1\155\1\0\5\155\5\0\6\155"+
    "\2\0\1\155\1\157\4\155\2\0\2\155\7\0\1\153"+
    "\2\0\1\110\31\0\1\55\125\0\1\21\7\0\1\21"+
    "\34\0\1\144\13\0\1\144\2\0\2\144\1\145\14\0"+
    "\10\21\7\0\1\21\1\0\1\21\12\0\2\72\1\0"+
    "\2\72\2\0\15\72\1\0\1\72\1\0\5\72\5\0"+
    "\6\72\2\0\6\72\2\0\2\72\60\0\1\160\42\0"+
    "\1\161\1\162\1\0\2\161\1\163\1\164\2\161\1\162"+
    "\12\161\1\0\1\165\1\0\1\161\2\162\2\161\1\163"+
    "\4\0\6\161\1\0\1\166\6\161\2\0\2\161\15\0"+
    "\1\101\1\23\1\21\75\0\1\167\31\0\1\55\50\0"+
    "\1\167\2\0\1\104\105\0\2\105\1\0\2\105\2\0"+
    "\15\105\1\0\1\105\1\0\5\105\5\0\6\105\2\0"+
    "\6\105\2\0\2\105\20\0\1\170\2\0\2\170\2\0"+
    "\2\170\1\0\12\170\3\0\1\170\2\0\2\170\5\0"+
    "\6\170\2\0\6\170\2\0\2\170\21\0\1\171\1\0"+
    "\21\171\1\0\1\171\1\0\5\171\5\0\6\171\2\0"+
    "\6\171\2\0\2\171\21\0\1\111\1\0\3\111\1\112"+
    "\1\172\6\111\1\173\2\111\1\174\2\111\1\113\1\111"+
    "\1\0\5\111\5\0\6\111\2\0\6\111\2\0\2\111"+
    "\12\0\1\110\11\0\1\175\2\0\2\175\1\0\12\175"+
    "\3\0\1\175\2\0\2\175\5\0\6\175\2\0\6\175"+
    "\2\0\2\175\21\0\1\111\1\0\3\111\1\112\4\111"+
    "\1\176\10\111\1\113\1\111\1\0\5\111\5\0\6\111"+
    "\2\0\1\111\1\176\4\111\2\0\2\111\12\0\1\110"+
    "\6\0\1\111\1\0\3\111\1\112\1\177\14\111\1\113"+
    "\1\111\1\0\5\111\5\0\6\111\2\0\6\111\2\0"+
    "\2\111\12\0\1\110\6\0\1\116\1\0\21\116\1\113"+
    "\1\116\1\0\5\116\5\0\6\116\2\0\6\116\2\0"+
    "\2\116\27\0\1\200\27\0\1\51\44\0\1\120\7\0"+
    "\1\120\13\0\1\120\2\0\2\120\1\0\1\121\21\0"+
    "\1\121\26\0\1\201\3\0\1\202\3\0\1\201\13\0"+
    "\1\201\2\0\2\201\2\0\1\202\126\0\1\203\47\0"+
    "\1\204\2\0\1\204\53\0\1\205\7\0\1\205\6\0"+
    "\4\205\1\0\1\205\1\0\3\205\1\0\1\205\20\0"+
    "\2\205\62\0\1\206\45\0\2\131\1\0\2\131\2\0"+
    "\15\131\1\0\1\131\1\0\5\131\5\0\6\131\2\0"+
    "\6\131\2\0\2\131\33\0\1\207\36\0\1\207\47\0"+
    "\1\210\33\0\1\210\72\0\1\211\54\0\1\212\127\0"+
    "\1\213\13\0\1\213\42\0\1\214\24\0\1\215\72\0"+
    "\1\216\21\0\1\216\54\0\1\217\72\0\1\220\33\0"+
    "\1\220\40\0\1\221\13\0\1\221\2\0\2\221\52\0"+
    "\1\222\7\0\1\222\6\0\4\222\1\0\1\222\1\0"+
    "\3\222\1\0\1\222\20\0\2\222\24\0\1\151\101\0"+
    "\1\150\1\151\101\0\1\150\1\151\1\152\1\155\1\0"+
    "\2\155\1\111\1\112\4\155\1\223\10\155\1\113\1\155"+
    "\1\0\5\155\5\0\6\155\2\0\1\155\1\223\4\155"+
    "\2\0\2\155\7\0\1\153\2\0\1\110\3\0\1\150"+
    "\1\151\1\152\1\155\1\0\2\155\1\111\1\112\1\224"+
    "\14\155\1\113\1\155\1\0\5\155\5\0\6\155\2\0"+
    "\6\155\2\0\2\155\7\0\1\153\2\0\1\110\5\0"+
    "\1\225\2\0\2\225\2\0\2\225\1\0\12\225\3\0"+
    "\1\225\2\0\2\225\5\0\6\225\2\0\6\225\2\0"+
    "\2\225\20\0\2\161\1\0\2\161\2\0\15\161\1\0"+
    "\1\161\1\0\5\161\5\0\6\161\2\0\6\161\2\0"+
    "\2\161\11\0\1\226\7\0\1\162\4\0\1\227\2\0"+
    "\1\162\13\0\1\162\2\0\2\162\1\0\1\230\21\0"+
    "\1\230\16\0\1\231\7\0\1\162\4\0\1\164\2\0"+
    "\1\162\13\0\1\165\2\0\2\162\52\0\1\227\7\0"+
    "\1\227\13\0\1\227\2\0\2\227\52\0\1\162\4\0"+
    "\1\227\2\0\1\162\13\0\1\162\2\232\2\162\1\233"+
    "\1\230\21\0\1\230\16\0\1\231\6\0\1\234\2\0"+
    "\2\234\2\0\2\234\1\0\12\234\3\0\1\234\2\0"+
    "\2\234\5\0\6\234\2\0\6\234\2\0\2\234\27\0"+
    "\1\235\2\0\1\236\1\237\25\0\1\240\1\241\1\0"+
    "\1\242\4\0\1\243\1\237\3\0\1\241\3\0\1\243"+
    "\20\0\2\170\1\0\2\170\2\0\15\170\1\0\1\170"+
    "\1\0\5\170\5\0\6\170\2\0\6\170\2\0\2\170"+
    "\21\0\1\171\1\0\3\171\1\244\15\171\1\0\1\171"+
    "\1\0\5\171\5\0\6\171\2\0\6\171\2\0\2\171"+
    "\21\0\1\111\1\0\3\111\1\112\1\111\1\245\12\111"+
    "\1\246\1\113\1\111\1\0\5\111\5\0\6\111\2\0"+
    "\6\111\2\0\2\111\12\0\1\110\6\0\1\111\1\0"+
    "\3\111\1\112\10\111\1\247\4\111\1\113\1\111\1\0"+
    "\5\111\5\0\6\111\2\0\2\111\1\247\3\111\2\0"+
    "\2\111\12\0\1\110\6\0\1\111\1\0\3\111\1\112"+
    "\7\111\1\250\5\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\6\111\2\0\2\111\12\0\1\110\6\0"+
    "\1\251\1\0\1\175\1\251\2\175\15\251\1\0\1\251"+
    "\1\0\5\251\5\0\6\251\2\0\6\251\2\0\2\251"+
    "\21\0\1\111\1\0\3\111\1\112\1\252\14\111\1\113"+
    "\1\111\1\0\5\111\5\0\6\111\2\0\6\111\2\0"+
    "\2\111\12\0\1\110\6\0\1\111\1\0\3\111\1\112"+
    "\15\111\1\113\1\111\1\0\5\111\5\0\6\111\2\0"+
    "\6\111\2\0\2\111\12\0\1\110\1\253\14\0\1\254"+
    "\73\0\1\201\7\0\1\201\13\0\1\201\2\0\2\201"+
    "\46\0\1\206\2\0\1\255\2\0\2\255\2\0\2\255"+
    "\1\0\12\255\3\0\1\255\2\0\2\255\5\0\6\255"+
    "\2\0\6\255\1\256\1\0\2\255\2\0\1\257\57\0"+
    "\1\260\13\0\1\260\37\0\1\261\36\0\1\261\74\0"+
    "\1\262\101\0\1\263\101\0\1\264\13\0\1\264\43\0"+
    "\1\265\33\0\1\265\72\0\1\266\62\0\1\267\125\0"+
    "\1\270\46\0\1\271\101\0\1\21\13\0\1\21\2\0"+
    "\2\21\52\0\1\21\7\0\1\21\6\0\4\21\1\0"+
    "\1\21\1\0\3\21\1\0\1\21\20\0\2\21\23\0"+
    "\1\150\1\151\1\152\1\155\1\0\2\155\1\111\1\112"+
    "\1\272\14\155\1\113\1\155\1\0\5\155\5\0\6\155"+
    "\2\0\6\155\2\0\2\155\7\0\1\153\2\0\1\110"+
    "\3\0\1\150\1\151\1\152\1\155\1\0\2\155\1\111"+
    "\1\112\15\155\1\113\1\155\1\0\5\155\5\0\6\155"+
    "\2\0\6\155\2\0\2\155\7\0\1\153\2\0\1\110"+
    "\1\253\4\0\2\225\1\0\2\225\2\0\15\225\1\0"+
    "\1\225\1\0\5\225\5\0\6\225\2\0\6\225\2\0"+
    "\2\225\21\0\1\227\7\0\1\227\13\0\1\227\2\0"+
    "\2\227\1\0\1\230\21\0\1\230\16\0\1\231\7\0"+
    "\1\273\3\0\1\274\3\0\1\273\13\0\1\273\2\0"+
    "\2\273\2\0\1\274\73\0\1\275\2\0\1\275\53\0"+
    "\1\276\7\0\1\276\6\0\4\276\1\0\1\276\1\0"+
    "\3\276\1\0\1\276\20\0\2\276\25\0\2\234\1\0"+
    "\2\234\2\0\15\234\1\0\1\234\1\0\5\234\5\0"+
    "\6\234\2\0\6\234\2\0\2\234\11\0\1\277\31\0"+
    "\1\300\16\0\1\301\13\0\1\301\57\0\1\302\21\0"+
    "\1\302\35\0\1\303\107\0\1\304\120\0\1\305\21\0"+
    "\1\305\37\0\1\306\113\0\1\307\60\0\1\310\1\0"+
    "\21\310\1\0\1\310\1\0\5\310\5\0\6\310\2\0"+
    "\6\310\2\0\2\310\21\0\1\111\1\0\3\111\1\112"+
    "\1\311\3\111\1\312\10\111\1\113\1\111\1\0\5\111"+
    "\5\0\6\111\2\0\1\111\1\312\4\111\2\0\2\111"+
    "\12\0\1\110\6\0\1\111\1\0\3\111\1\112\4\111"+
    "\1\313\10\111\1\113\1\111\1\0\5\111\5\0\6\111"+
    "\2\0\1\111\1\313\4\111\2\0\2\111\12\0\1\110"+
    "\6\0\1\111\1\0\3\111\1\112\11\111\1\25\3\111"+
    "\1\113\1\111\1\0\5\111\5\0\6\111\2\0\6\111"+
    "\2\0\2\111\12\0\1\110\6\0\1\111\1\0\3\111"+
    "\1\112\13\111\1\314\1\111\1\113\1\111\1\0\5\111"+
    "\5\0\6\111\2\0\3\111\1\314\2\111\2\0\2\111"+
    "\12\0\1\110\6\0\1\251\1\0\1\175\1\251\2\175"+
    "\15\251\1\113\1\251\1\0\5\251\5\0\6\251\2\0"+
    "\6\251\2\0\2\251\21\0\1\111\1\0\3\111\1\112"+
    "\3\111\1\177\11\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\6\111\2\0\2\111\12\0\1\110\1\253"+
    "\30\0\1\315\65\0\1\51\71\0\1\316\1\317\2\255"+
    "\1\0\2\255\2\0\15\255\1\0\1\255\1\0\5\255"+
    "\5\0\6\255\2\0\6\255\2\0\2\255\20\0\1\320"+
    "\2\0\2\320\2\0\2\320\1\0\12\320\3\0\1\320"+
    "\2\0\2\320\5\0\6\320\2\0\6\320\2\0\2\320"+
    "\20\0\1\321\2\0\2\321\2\0\2\321\1\0\12\321"+
    "\3\0\1\321\2\0\2\321\5\0\6\321\2\0\6\321"+
    "\2\0\2\321\36\0\1\322\61\0\1\323\35\0\1\324"+
    "\21\0\1\324\6\0\1\21\45\0\1\325\76\0\1\326"+
    "\102\0\1\327\102\0\1\330\74\0\1\331\102\0\1\323"+
    "\120\0\1\332\21\0\1\332\60\0\1\326\21\0\1\326"+
    "\23\0\1\150\1\151\1\152\1\155\1\0\2\155\1\111"+
    "\1\112\3\155\1\224\11\155\1\113\1\155\1\0\5\155"+
    "\5\0\6\155\2\0\6\155\2\0\2\155\7\0\1\153"+
    "\2\0\1\110\1\253\5\0\1\273\7\0\1\273\13\0"+
    "\1\273\2\0\2\273\42\0\1\231\7\0\1\273\7\0"+
    "\1\273\13\0\1\273\2\0\2\273\76\0\1\275\2\0"+
    "\1\275\43\0\1\231\7\0\1\276\7\0\1\276\6\0"+
    "\4\276\1\0\1\276\1\0\3\276\1\0\1\276\20\0"+
    "\2\276\16\0\1\231\50\0\1\333\13\0\1\333\67\0"+
    "\1\334\72\0\1\335\21\0\1\335\67\0\1\336\13\0"+
    "\1\336\67\0\1\337\52\0\1\340\36\0\1\340\63\0"+
    "\1\341\21\0\1\341\67\0\1\335\13\0\1\335\25\0"+
    "\1\111\1\0\3\111\1\112\2\111\2\25\11\111\1\113"+
    "\1\111\1\0\5\111\5\0\6\111\2\0\6\111\2\0"+
    "\2\111\12\0\1\110\6\0\1\111\1\0\3\111\1\112"+
    "\5\111\1\342\7\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\6\111\2\0\2\111\12\0\1\110\6\0"+
    "\1\111\1\0\3\111\1\112\11\111\1\343\3\111\1\113"+
    "\1\111\1\0\5\111\5\0\6\111\2\0\6\111\2\0"+
    "\2\111\12\0\1\110\6\0\1\111\1\0\3\111\1\112"+
    "\13\111\1\25\1\111\1\113\1\111\1\0\5\111\5\0"+
    "\6\111\2\0\3\111\1\25\2\111\2\0\2\111\12\0"+
    "\1\110\31\0\1\344\55\0\1\317\103\0\2\320\1\0"+
    "\2\320\2\0\15\320\1\0\1\320\1\0\5\320\5\0"+
    "\6\320\2\0\6\320\1\345\1\0\2\320\20\0\2\321"+
    "\1\0\2\321\2\0\15\321\1\0\1\321\1\0\5\321"+
    "\5\0\6\321\2\0\6\321\2\0\2\321\2\0\1\345"+
    "\34\0\1\346\33\0\1\346\24\0\1\323\66\0\1\21"+
    "\57\0\1\347\56\0\1\350\100\0\1\323\36\0\1\323"+
    "\75\0\1\323\77\0\1\327\13\0\1\327\21\0\1\323"+
    "\35\0\1\351\21\0\1\351\6\0\1\21\36\0\1\326"+
    "\105\0\1\352\66\0\1\353\70\0\1\354\150\0\1\355"+
    "\66\0\1\356\117\0\1\357\50\0\1\360\71\0\1\111"+
    "\1\0\3\111\1\112\6\111\1\25\6\111\1\113\1\111"+
    "\1\0\5\111\5\0\6\111\2\0\6\111\2\0\2\111"+
    "\12\0\1\110\6\0\1\111\1\0\3\111\1\112\1\111"+
    "\1\25\13\111\1\113\1\111\1\0\5\111\5\0\6\111"+
    "\2\0\6\111\2\0\2\111\12\0\1\110\6\0\25\361"+
    "\1\0\6\361\1\0\2\361\1\0\16\361\1\0\3\361"+
    "\7\0\1\361\2\0\2\361\2\0\1\316\1\317\144\0"+
    "\1\323\74\0\1\362\21\0\1\362\60\0\1\323\21\0"+
    "\1\323\50\0\1\363\73\0\1\364\121\0\1\365\21\0"+
    "\1\365\106\0\1\366\44\0\1\367\121\0\1\370\13\0"+
    "\1\370\21\0\1\371\106\0\1\372\2\361\1\372\2\361"+
    "\17\372\1\0\5\372\1\361\1\0\2\361\1\0\6\372"+
    "\2\361\6\372\1\0\1\361\2\372\7\0\1\361\2\0"+
    "\2\361\46\0\1\323\13\0\1\323\43\0\1\323\33\0"+
    "\1\323\24\0\1\373\147\0\1\374\13\0\1\374\21\0"+
    "\1\354\14\0\1\335\105\0\1\364\104\0\1\335\33\0"+
    "\1\335\42\0\1\375\36\0\1\375\75\0\1\376\32\0"+
    "\1\373\7\0\1\377\137\0\1\u0100\13\0\1\u0100\2\0"+
    "\1\u0101\54\0\1\u0102\21\0\1\u0102\67\0\1\u0103\13\0"+
    "\1\u0103\47\0\1\u0104\75\0\1\u0105\105\0\1\364\74\0"+
    "\1\u0106\36\0\1\u0106\63\0\1\364\21\0\1\364\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15075];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\20\0\1\11\22\1\1\11\1\1\5\11\2\1\1\11"+
    "\15\1\2\11\6\1\1\11\3\1\10\0\2\1\2\0"+
    "\1\1\4\0\1\11\1\1\12\0\1\1\1\0\2\11"+
    "\1\1\1\11\16\0\1\1\10\0\1\1\1\0\1\11"+
    "\2\1\13\0\2\1\2\0\1\1\1\11\2\0\1\11"+
    "\17\0\1\1\25\0\1\11\10\0\2\1\4\0\1\1"+
    "\1\11\34\0\1\1\14\0\3\1\13\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final static Set<String> PSEUDO_TYPES;
  private Stack<String> docLabels = new Stack<String>();

  static {
    PSEUDO_TYPES = new HashSet<String>(Arrays.asList(
        new String[] {
            "string", "integer", "int", "boolean", "bool", "float", "double",
            "object", "mixed", "array", "resource", "void", "null", "callback",
            "false", "true", "self", "callable"
        }
    ));
  }

  private boolean isTabOrSpace(int i) {
    return yycharat(i) == '\t' || yycharat(i) == ' ';
  }

  private static boolean isHtmlState(int state) {
    return state == YYINITIAL;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpSymbolTokenizer(java.io.Reader in) {
  super(in);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpSymbolTokenizer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 198) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public boolean yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { yypush(DOCCOMMENT);
          }
        case 33: break;
        case 25: 
          { setAttribs(yytext().substring(2), yychar + 2, yychar + yylength());
        yypop(); //because "$arr->a[0]" is the same as $arr->a . "[0]"
        return true;
          }
        case 34: break;
        case 5: 
          { yypush(BACKQUOTE);
          }
        case 35: break;
        case 4: 
          { yypush(STRING);
          }
        case 36: break;
        case 7: 
          { yypush(IN_SCRIPT);
          }
        case 37: break;
        case 27: 
          { yypop(); //because "$arr[0][1]" is the same as $arr[0] . "[1]"
          }
        case 38: break;
        case 15: 
          { yybegin(yystate() == DOCCOM_TYPE_THEN_NAME ? DOCCOM_NAME : DOCCOMMENT);
          }
        case 39: break;
        case 3: 
          { yypush(QSTRING);
          }
        case 40: break;
        case 26: 
          { //then the identifier is actually a string!
        yypop();
          }
        case 41: break;
        case 22: 
          { int i = yylength() - 1;
    while (yycharat(i) == '\n' || yycharat(i) == '\r') { i--; }
    if (yycharat(i) == ';') { i--; }
    if (yytext().substring(0, i+1).equals(this.docLabels.peek())) {
        String text = this.docLabels.pop();
        yypop();
    }
          }
        case 42: break;
        case 31: 
          { yybegin(DOCCOM_NAME);
          }
        case 43: break;
        case 30: 
          { yybegin(DOCCOM_TYPE);
          }
        case 44: break;
        case 6: 
          { yypush(SCOMMENT);
          }
        case 45: break;
        case 23: 
          { setAttribs(yytext().substring(1), yychar + 1, yychar + yylength());
        yybegin(DOCCOMMENT);
        return true;
          }
        case 46: break;
        case 19: 
          { //we ignore keywords if the identifier starts with one of variable chars
        setAttribs(yytext().substring(1), yychar + 1, yychar + yylength());
        return true;
          }
        case 47: break;
        case 17: 
          { yypush(COMMENT);
          }
        case 48: break;
        case 8: 
          { if (!this.stack.empty() && !isHtmlState(this.stack.peek()))
            yypop(); //may pop STRINGEXPR/HEREDOC/BACKQUOTE
          }
        case 49: break;
        case 21: 
          { yypushback(1);
        yypush(IN_SCRIPT);
          }
        case 50: break;
        case 16: 
          { if (!PSEUDO_TYPES.contains(yytext().toLowerCase())) {
            setAttribs(yytext(), yychar, yychar + yylength());
            return true;
        }
          }
        case 51: break;
        case 18: 
          { while (!isHtmlState(yystate())) yypop();
          }
        case 52: break;
        case 11: 
          { setAttribs(yytext(), yychar, yychar + yylength());
        return true;
          }
        case 53: break;
        case 2: 
          { if (!Consts.kwd.contains(yytext())) {
            setAttribs(yytext(), yychar, yychar + yylength());
            return true;
        }
          }
        case 54: break;
        case 28: 
          { setAttribs(yytext().substring(2, yylength()-1), yychar + 2,
                yychar + yylength() - 1);
        yypop();
        return true;
          }
        case 55: break;
        case 32: 
          { yybegin(DOCCOM_TYPE_THEN_NAME);
          }
        case 56: break;
        case 20: 
          { yypush(STRINGEXPR);
          }
        case 57: break;
        case 9: 
          { yypush(STRINGVAR);
          }
        case 58: break;
        case 12: 
          { yybegin(IN_SCRIPT);
          }
        case 59: break;
        case 14: 
          { yybegin(DOCCOMMENT); yypushback(1);
          }
        case 60: break;
        case 10: 
          { yypop();
          }
        case 61: break;
        case 13: 
          { yypushback(1); yypop();
          }
        case 62: break;
        case 29: 
          { int i = yycharat(0) == 'b' ? 4 : 3, j = yylength()-1;
        while (isTabOrSpace(i)) { i++; }
        while (yycharat(j) == '\n' || yycharat(j) == '\r') { j--; }

        if (yycharat(i) == '\'' || yycharat(i) == '"') {
            yypush(NOWDOC);
            String text = yytext().substring(i+1, j);
            this.docLabels.push(text);
        } else {
            yypush(HEREDOC);
            String text = yytext().substring(i, j+1);
            this.docLabels.push(text);
        }
          }
        case 63: break;
        case 1: 
          { 
          }
        case 64: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return false;
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
