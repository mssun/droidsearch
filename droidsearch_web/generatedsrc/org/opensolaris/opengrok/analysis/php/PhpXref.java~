/* The following code was generated by JFlex 1.4.3 on 10/25/12 4:28 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Cross reference a PHP file
 */

package org.opensolaris.opengrok.analysis.php;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/25/12 4:28 PM from the specification file
 * <tt>/home/mssun/Desktop/opengrok-dev/src/org/opensolaris/opengrok/analysis/php/PhpXref.lex</tt>
 */
public class PhpXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int HEREDOC = 20;
  public static final int AFTER_TAG_NAME = 4;
  public static final int HTMLCOMMENT = 12;
  public static final int NOWDOC = 22;
  public static final int STRINGEXPR = 30;
  public static final int ATTRIBUTE_NOQUOTE = 6;
  public static final int IN_SCRIPT = 14;
  public static final int ATTRIBUTE_SINGLE = 8;
  public static final int STRINGVAR = 32;
  public static final int STRING = 16;
  public static final int ATTRIBUTE_DOUBLE = 10;
  public static final int DOCCOM_NAME = 38;
  public static final int SCOMMENT = 18;
  public static final int COMMENT = 24;
  public static final int TAG_NAME = 2;
  public static final int DOCCOM_TYPE = 40;
  public static final int DOCCOM_TYPE_THEN_NAME = 36;
  public static final int QSTRING = 26;
  public static final int DOCCOMMENT = 34;
  public static final int BACKQUOTE = 28;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 11, 12, 13, 14, 14, 15, 15, 16, 16, 17, 17, 
    18, 18, 19, 19, 20, 20, 21, 21, 20, 20
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\2\0\1\2\22\0\1\1\1\76\1\100\1\102"+
    "\1\54\1\6\1\107\1\63\1\67\1\70\1\64\1\40\1\6\1\11"+
    "\1\12\1\30\1\31\1\34\1\35\1\15\1\15\3\35\2\5\1\77"+
    "\1\105\1\41\1\43\1\44\1\42\1\106\1\27\1\33\1\24\1\25"+
    "\1\37\1\26\1\45\1\14\1\22\1\52\1\73\1\21\1\20\1\23"+
    "\1\47\1\13\1\10\1\46\1\16\1\17\1\50\1\72\1\71\1\36"+
    "\1\51\1\10\1\65\1\53\1\66\1\110\1\7\1\101\1\27\1\33"+
    "\1\24\1\25\1\61\1\60\1\45\1\14\1\22\1\52\1\73\1\21"+
    "\1\20\1\57\1\47\1\13\1\10\1\62\1\16\1\56\1\50\1\55"+
    "\1\71\1\36\1\51\1\10\1\103\1\32\1\104\1\6\70\4\1\75"+
    "\10\4\u1040\74\uef00\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\26\0\1\1\1\2\2\3\6\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\16\1\11"+
    "\1\17\1\2\2\20\1\21\1\22\1\2\2\23\1\4"+
    "\1\11\1\24\1\25\3\4\1\25\1\24\1\11\2\4"+
    "\1\26\1\4\1\27\1\30\1\31\1\32\1\33\1\2"+
    "\2\34\1\11\1\4\1\35\1\4\1\2\2\4\1\1"+
    "\7\4\1\36\1\37\1\40\1\41\5\42\1\2\2\4"+
    "\3\43\10\0\1\5\1\44\2\0\1\14\1\45\1\0"+
    "\1\46\1\25\2\0\1\47\4\0\1\50\1\51\12\0"+
    "\1\52\1\0\1\52\1\53\1\2\1\54\1\55\1\56"+
    "\2\57\6\0\1\60\12\0\1\61\13\0\1\44\1\0"+
    "\1\62\1\0\1\45\1\63\1\0\1\46\1\25\1\0"+
    "\1\64\2\25\13\0\2\52\2\0\1\65\1\66\2\0"+
    "\1\67\3\0\10\70\6\0\1\71\5\0\1\72\3\0"+
    "\1\73\24\0\1\74\10\70\3\0\1\61\2\0\1\75"+
    "\1\76\2\0\1\76\2\0\2\77\5\0\1\100\6\0"+
    "\2\70\1\101\4\70\15\0\5\70\1\102\1\70\6\0"+
    "\1\103\1\70\1\101\2\70\3\0\1\104\1\70\3\0"+
    "\1\70\2\0\1\103\11\0\1\103\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0646\0\u0721\0\u0646\0\u076a\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u0646\0\u0646\0\u08d7\0\u0920\0\u0646\0\u0969\0\u09b2"+
    "\0\u09fb\0\u0a44\0\u0646\0\u0a8d\0\u0646\0\u0ad6\0\u0b1f\0\u0646"+
    "\0\u0646\0\u0646\0\u0b68\0\u0bb1\0\u0646\0\u0bfa\0\u0c43\0\u0c8c"+
    "\0\u0cd5\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0ed4"+
    "\0\u0f1d\0\u0646\0\u0f66\0\u0646\0\u0646\0\u0646\0\u0646\0\u0646"+
    "\0\u0faf\0\u0ff8\0\u0646\0\u0646\0\u1041\0\u108a\0\u10d3\0\u111c"+
    "\0\u1165\0\u11ae\0\u11f7\0\u1240\0\u1289\0\u12d2\0\u131b\0\u1364"+
    "\0\u13ad\0\u13f6\0\u0646\0\u143f\0\u0646\0\u0646\0\u0646\0\u068f"+
    "\0\u06d8\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u0646\0\u15f5"+
    "\0\u163e\0\u0721\0\u1687\0\u076a\0\u16d0\0\u1719\0\u1762\0\u17ab"+
    "\0\u17f4\0\u0646\0\u183d\0\u1886\0\u18cf\0\u0646\0\u1918\0\u1961"+
    "\0\u19aa\0\u19f3\0\u1a3c\0\u0d67\0\u1a85\0\u1ace\0\u1b17\0\u0e8b"+
    "\0\u1b60\0\u0646\0\u1ba9\0\u0f66\0\u1bf2\0\u1c3b\0\u1c84\0\u1ccd"+
    "\0\u1d16\0\u1d5f\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u0646"+
    "\0\u0646\0\u0646\0\u0646\0\u0646\0\u0646\0\u1f15\0\u0646\0\u11f7"+
    "\0\u1f5e\0\u1240\0\u1289\0\u1fa7\0\u1ff0\0\u0646\0\u2039\0\u2082"+
    "\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u15f5"+
    "\0\u22ca\0\u2313\0\u163e\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u2480"+
    "\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u0646\0\u25ed\0\u2636\0\u267f"+
    "\0\u0646\0\u0646\0\u26c8\0\u0646\0\u2711\0\u2711\0\u0646\0\u1ace"+
    "\0\u1b17\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e\0\u28c7\0\u2910"+
    "\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6\0\u2b0f\0\u2b58"+
    "\0\u2ba1\0\u0646\0\u2bea\0\u2c33\0\u0646\0\u2c7c\0\u2cc5\0\u2d0e"+
    "\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56"+
    "\0\u2f9f\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u3155\0\u319e"+
    "\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6"+
    "\0\u0646\0\u342f\0\u3478\0\u34c1\0\u350a\0\u3553\0\u359c\0\u35e5"+
    "\0\u362e\0\u3677\0\u36c0\0\u3709\0\u3752\0\u379b\0\u37e4\0\u382d"+
    "\0\u3876\0\u38bf\0\u3908\0\u3951\0\u399a\0\u0646\0\u39e3\0\u3a2c"+
    "\0\u3a75\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74"+
    "\0\u3cbd\0\u3d06\0\u3d4f\0\u3d98\0\u319e\0\u3de1\0\u3e2a\0\u3e73"+
    "\0\u076a\0\u3ebc\0\u3f05\0\u3f4e\0\u0646\0\u3f97\0\u3fe0\0\u4029"+
    "\0\u4072\0\u40bb\0\u0646\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228"+
    "\0\u4271\0\u42ba\0\u4303\0\u2d57\0\u434c\0\u4395\0\u43de\0\u4427"+
    "\0\u4470\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd\0\u4626\0\u466f"+
    "\0\u46b8\0\u4701\0\u474a\0\u4793\0\u47dc\0\u4825\0\u486e\0\u48b7"+
    "\0\u4900\0\u4949\0\u2d57\0\u0646\0\u4992\0\u49db\0\u4a24\0\u4a6d"+
    "\0\u4ab6\0\u4aff\0\u2d57\0\u4b48\0\u4b91\0\u4bda\0\u4c23\0\u4c6c"+
    "\0\u4cb5\0\u4cfe\0\u4a6d\0\u4d47\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b"+
    "\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u506a\0\u50b3"+
    "\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u0646\0\u5220";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\27\1\30\1\31\1\32\1\27\1\33\1\34\1\33"+
    "\1\35\2\33\1\35\1\36\1\33\10\35\1\37\1\35"+
    "\1\40\1\33\1\34\1\35\2\33\2\35\1\34\1\41"+
    "\2\34\1\42\6\35\2\34\3\35\1\37\2\35\6\34"+
    "\3\35\2\27\11\34\1\43\1\34\1\27\1\30\1\31"+
    "\1\32\1\27\2\34\2\44\2\34\2\44\1\34\12\44"+
    "\3\34\1\44\2\34\2\44\1\34\1\45\2\34\1\46"+
    "\6\44\2\34\6\44\6\34\4\44\1\27\11\34\1\43"+
    "\1\34\1\27\1\30\1\31\1\32\1\27\2\34\2\47"+
    "\2\34\2\47\1\34\12\47\3\34\1\47\2\34\2\47"+
    "\1\34\1\45\1\34\1\50\1\46\6\47\2\34\6\47"+
    "\6\34\4\47\1\27\11\34\1\43\1\34\1\27\1\51"+
    "\1\52\1\53\1\27\34\34\1\54\2\34\1\55\27\34"+
    "\2\27\11\34\1\43\1\34\1\27\1\56\1\57\1\60"+
    "\1\27\34\34\1\54\2\34\1\42\16\34\1\61\10\34"+
    "\2\27\11\34\1\43\1\34\1\27\1\56\1\57\1\60"+
    "\1\27\34\34\1\54\2\34\1\42\27\34\2\27\2\34"+
    "\1\62\6\34\1\43\1\34\1\27\1\63\1\64\1\65"+
    "\1\27\1\33\1\34\1\33\1\35\1\66\1\33\1\35"+
    "\1\36\1\33\10\35\1\37\1\35\1\40\1\33\1\34"+
    "\1\35\2\33\2\35\1\34\1\67\2\34\1\42\6\35"+
    "\2\34\3\35\1\37\2\35\6\34\3\35\2\27\11\34"+
    "\1\43\1\34\1\27\1\30\1\31\1\32\1\70\1\71"+
    "\1\34\2\70\1\72\1\73\2\70\1\71\12\70\1\74"+
    "\1\75\1\34\1\76\2\71\2\70\1\72\1\77\1\100"+
    "\1\34\1\42\6\70\1\34\1\101\6\70\1\102\3\34"+
    "\1\103\1\34\5\70\2\34\1\104\1\105\1\106\1\107"+
    "\1\110\2\34\1\43\1\34\1\27\1\111\1\112\1\113"+
    "\1\27\1\33\1\34\1\33\1\35\2\33\1\35\1\36"+
    "\1\33\10\35\1\37\1\35\1\40\1\33\1\34\1\35"+
    "\2\33\2\35\1\34\1\114\2\34\1\42\6\35\1\115"+
    "\1\116\3\35\1\37\2\35\6\34\3\35\2\27\2\34"+
    "\1\62\2\34\1\117\3\34\1\43\1\34\1\27\1\120"+
    "\1\52\1\53\1\27\1\33\1\34\1\33\1\35\2\33"+
    "\1\35\1\36\1\33\10\35\1\37\1\35\1\40\1\33"+
    "\1\34\1\35\2\33\2\35\1\34\1\114\1\121\1\34"+
    "\1\42\6\35\2\34\3\35\1\37\2\35\6\34\3\35"+
    "\2\27\11\34\1\43\1\34\1\27\1\111\1\112\1\113"+
    "\1\27\1\33\1\34\1\33\1\35\2\33\1\35\1\36"+
    "\1\33\10\35\1\37\1\35\1\40\1\33\1\34\1\35"+
    "\2\33\2\35\1\34\1\114\2\34\1\42\6\35\1\122"+
    "\1\116\3\35\1\37\2\35\6\34\3\35\2\27\5\34"+
    "\1\117\3\34\1\43\1\34\1\27\1\111\1\112\1\113"+
    "\1\123\1\33\1\34\1\124\1\125\2\33\1\125\1\126"+
    "\1\33\10\125\1\127\1\125\1\40\1\33\1\34\1\125"+
    "\2\33\2\125\1\34\1\114\2\34\1\42\6\125\1\122"+
    "\1\116\3\125\1\127\2\125\6\34\3\125\2\123\5\34"+
    "\1\117\3\34\1\43\1\34\1\27\1\111\1\112\1\113"+
    "\1\27\1\33\1\34\1\33\1\35\2\33\1\35\1\36"+
    "\1\33\10\35\1\37\1\35\1\40\1\33\1\34\1\35"+
    "\2\33\2\35\1\34\1\114\2\34\1\42\6\35\2\34"+
    "\3\35\1\37\2\35\6\34\3\35\2\27\11\34\1\43"+
    "\1\34\1\27\1\111\1\112\1\113\1\123\1\33\1\34"+
    "\1\124\1\125\2\33\1\125\1\126\1\33\10\125\1\127"+
    "\1\125\1\40\1\33\1\34\1\125\2\33\2\125\1\34"+
    "\1\114\2\34\1\42\6\125\2\34\3\125\1\127\2\125"+
    "\6\34\3\125\2\123\11\34\1\43\1\34\1\27\1\63"+
    "\1\64\1\65\1\27\1\33\1\34\1\33\1\35\2\33"+
    "\1\35\1\36\1\33\10\35\1\37\1\35\1\40\1\33"+
    "\1\34\1\35\2\33\2\35\1\34\1\114\2\34\1\42"+
    "\6\35\2\34\3\35\1\37\2\35\1\34\1\130\4\34"+
    "\3\35\2\27\11\34\1\43\1\34\1\27\1\111\1\112"+
    "\1\113\1\27\1\33\1\34\1\33\1\35\2\33\1\35"+
    "\1\36\1\33\10\35\1\37\1\35\1\40\1\33\1\34"+
    "\1\35\2\33\2\35\1\34\1\114\2\34\1\42\6\35"+
    "\1\131\1\34\3\35\1\37\2\35\1\62\5\34\3\35"+
    "\2\27\11\34\1\43\1\34\1\27\1\111\1\112\1\113"+
    "\1\27\1\33\1\34\1\33\1\35\2\33\1\35\1\36"+
    "\1\33\10\35\1\37\1\35\1\40\1\33\1\34\1\35"+
    "\2\33\2\35\1\34\1\114\2\34\1\42\6\35\1\132"+
    "\1\116\3\35\1\37\2\35\6\34\3\35\2\27\3\34"+
    "\1\133\1\34\1\117\3\34\1\43\1\34\1\27\1\30"+
    "\1\31\1\32\1\134\2\34\2\134\2\34\2\134\1\34"+
    "\12\134\3\34\1\134\2\34\2\134\1\34\1\114\2\34"+
    "\1\42\6\134\2\34\6\134\2\34\1\135\3\34\5\134"+
    "\6\34\1\136\2\34\1\43\1\34\1\137\1\140\1\141"+
    "\1\137\1\134\2\137\2\134\1\142\1\137\2\134\1\137"+
    "\12\134\3\137\1\134\2\137\2\134\5\137\6\134\2\137"+
    "\6\134\2\137\1\143\3\137\5\134\13\137\1\27\1\144"+
    "\1\64\1\65\1\27\1\33\1\34\1\33\1\35\2\33"+
    "\1\35\1\36\1\33\10\35\1\37\1\35\1\40\1\33"+
    "\1\34\1\35\2\33\2\35\1\34\1\114\2\34\1\42"+
    "\6\35\2\34\3\35\1\37\2\35\1\34\1\145\4\34"+
    "\3\35\2\27\5\34\1\146\3\34\1\43\1\34\1\147"+
    "\1\150\110\147\1\151\107\147\112\0\1\30\1\31\1\32"+
    "\110\0\1\32\112\0\1\152\1\0\21\152\1\0\1\152"+
    "\1\0\5\152\5\0\6\152\2\0\6\152\6\0\3\152"+
    "\12\0\1\153\7\0\1\154\1\0\3\154\1\155\15\154"+
    "\1\156\1\154\1\0\5\154\5\0\6\154\2\0\6\154"+
    "\6\0\3\154\12\0\1\153\7\0\1\154\1\0\3\154"+
    "\1\155\4\154\1\157\10\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\1\154\1\157\4\154\6\0\3\154"+
    "\12\0\1\153\7\0\1\154\1\0\3\154\1\155\4\154"+
    "\1\160\10\154\1\156\1\154\1\0\5\154\5\0\6\154"+
    "\2\0\1\154\1\160\4\154\6\0\3\154\12\0\1\153"+
    "\12\0\1\161\2\0\2\161\1\0\12\161\3\0\1\161"+
    "\2\0\2\161\5\0\6\161\2\0\6\161\6\0\3\161"+
    "\45\0\1\162\11\0\1\163\33\0\1\164\17\0\1\44"+
    "\1\0\21\44\1\0\1\44\1\0\5\44\5\0\6\44"+
    "\2\0\6\44\6\0\5\44\1\0\1\165\53\0\1\163"+
    "\53\0\1\47\1\0\21\47\1\0\1\47\1\0\5\47"+
    "\5\0\6\47\2\0\6\47\6\0\5\47\14\0\1\50"+
    "\61\0\1\166\14\0\1\166\11\0\1\51\1\52\1\53"+
    "\110\0\1\53\147\0\1\167\47\0\1\56\1\57\1\60"+
    "\110\0\1\60\106\0\1\63\1\64\1\65\110\0\1\65"+
    "\112\0\1\152\1\0\2\152\1\170\16\152\1\0\1\152"+
    "\1\0\5\152\5\0\6\152\2\0\6\152\6\0\3\152"+
    "\12\0\1\153\44\0\1\171\52\0\2\70\1\0\2\70"+
    "\2\0\15\70\1\0\1\70\1\0\5\70\5\0\6\70"+
    "\2\0\6\70\6\0\5\70\20\0\1\71\4\0\1\172"+
    "\2\0\1\71\13\0\1\71\2\0\2\71\1\0\1\173"+
    "\21\0\1\173\34\0\1\71\4\0\1\174\2\0\1\71"+
    "\13\0\1\75\2\0\2\71\60\0\1\172\7\0\1\172"+
    "\13\0\1\172\2\0\2\172\103\0\1\106\33\0\1\175"+
    "\31\0\1\71\4\0\1\172\2\0\1\71\13\0\1\71"+
    "\2\176\2\71\1\177\1\173\21\0\1\173\33\0\2\70"+
    "\1\0\2\70\2\0\15\70\1\0\1\70\1\0\5\70"+
    "\1\0\1\200\3\0\6\70\2\0\6\70\1\102\5\0"+
    "\5\70\2\0\1\104\51\0\1\201\113\0\1\202\50\0"+
    "\1\203\2\0\2\203\2\0\2\203\1\0\12\203\3\0"+
    "\1\203\2\0\2\203\5\0\6\203\2\0\6\203\6\0"+
    "\5\203\14\0\1\204\14\0\1\205\3\0\1\206\2\0"+
    "\1\207\1\210\1\211\3\0\1\212\12\0\1\213\1\214"+
    "\1\215\7\0\1\210\1\0\1\213\27\0\1\111\1\112"+
    "\1\113\110\0\1\113\122\0\1\216\13\0\1\216\2\0"+
    "\2\216\1\217\14\0\10\220\15\0\1\221\2\0\1\222"+
    "\110\0\1\223\61\0\1\224\35\0\1\120\1\52\1\53"+
    "\151\0\1\225\61\0\1\216\13\0\1\216\2\0\2\216"+
    "\1\217\14\0\10\220\20\0\1\222\7\0\1\226\1\227"+
    "\2\230\1\0\2\230\2\0\15\230\1\0\1\230\1\0"+
    "\5\230\5\0\6\230\2\0\6\230\6\0\5\230\7\0"+
    "\1\231\5\0\1\226\1\227\1\230\1\232\1\0\2\232"+
    "\2\152\15\232\1\0\1\232\1\0\5\232\5\0\6\232"+
    "\2\0\6\232\6\0\3\232\2\230\7\0\1\231\1\153"+
    "\4\0\1\226\1\227\1\230\1\233\1\0\2\233\1\154"+
    "\1\155\15\233\1\156\1\233\1\0\5\233\5\0\6\233"+
    "\2\0\6\233\6\0\3\233\2\230\7\0\1\231\1\153"+
    "\4\0\1\226\1\227\1\230\1\233\1\0\2\233\1\154"+
    "\1\155\4\233\1\234\10\233\1\156\1\233\1\0\5\233"+
    "\5\0\6\233\2\0\1\233\1\234\4\233\6\0\3\233"+
    "\2\230\7\0\1\231\1\153\4\0\1\226\1\227\1\230"+
    "\1\233\1\0\2\233\1\154\1\155\4\233\1\235\10\233"+
    "\1\156\1\233\1\0\5\233\5\0\6\233\2\0\1\233"+
    "\1\235\4\233\6\0\3\233\2\230\7\0\1\231\1\153"+
    "\32\0\1\236\133\0\1\220\7\0\1\220\42\0\1\216"+
    "\13\0\1\216\2\0\2\216\1\217\14\0\10\220\16\0"+
    "\1\221\1\0\1\222\11\0\2\134\1\0\2\134\2\0"+
    "\15\134\1\0\1\134\1\0\5\134\5\0\6\134\2\0"+
    "\6\134\6\0\5\134\57\0\1\237\50\0\1\240\1\241"+
    "\1\0\2\240\1\242\1\243\2\240\1\241\12\240\1\0"+
    "\1\244\1\0\1\240\2\241\2\240\1\242\4\0\6\240"+
    "\1\0\1\245\6\240\6\0\5\240\14\0\1\144\1\64"+
    "\1\65\102\0\1\246\32\0\1\236\55\0\1\246\110\0"+
    "\1\247\3\0\1\250\2\0\1\251\2\0\2\251\2\0"+
    "\2\251\1\0\12\251\3\0\1\251\2\0\2\251\5\0"+
    "\6\251\2\0\6\251\4\0\1\252\1\0\5\251\14\0"+
    "\1\253\52\0\1\254\41\0\1\255\1\0\21\255\1\0"+
    "\1\255\1\0\5\255\5\0\6\255\2\0\6\255\6\0"+
    "\3\255\22\0\1\154\1\0\3\154\1\155\1\256\6\154"+
    "\1\257\2\154\1\260\2\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\6\154\6\0\3\154\12\0\1\153"+
    "\12\0\1\261\2\0\2\261\1\0\12\261\3\0\1\261"+
    "\2\0\2\261\5\0\6\261\2\0\6\261\6\0\3\261"+
    "\22\0\1\154\1\0\3\154\1\155\4\154\1\262\10\154"+
    "\1\156\1\154\1\0\5\154\5\0\6\154\2\0\1\154"+
    "\1\262\4\154\6\0\3\154\12\0\1\153\7\0\1\154"+
    "\1\0\3\154\1\155\1\263\14\154\1\156\1\154\1\0"+
    "\5\154\5\0\6\154\2\0\6\154\6\0\3\154\12\0"+
    "\1\153\7\0\1\161\1\0\21\161\1\156\1\161\1\0"+
    "\5\161\5\0\6\161\2\0\6\161\6\0\3\161\30\0"+
    "\1\264\27\0\1\265\56\0\1\266\106\0\2\267\2\0"+
    "\2\267\1\0\12\267\3\0\1\267\2\0\2\267\5\0"+
    "\6\267\2\0\6\267\6\0\4\267\27\0\1\270\27\0"+
    "\1\271\52\0\1\152\1\0\21\152\1\0\1\152\1\0"+
    "\5\152\4\0\1\272\6\152\2\0\6\152\6\0\3\152"+
    "\12\0\1\153\15\0\1\273\27\0\1\274\52\0\1\172"+
    "\7\0\1\172\13\0\1\172\2\0\2\172\1\0\1\173"+
    "\21\0\1\173\34\0\1\275\3\0\1\276\3\0\1\275"+
    "\13\0\1\275\2\0\2\275\2\0\1\276\134\0\1\277"+
    "\55\0\1\300\2\0\1\300\61\0\1\301\7\0\1\301"+
    "\6\0\4\301\1\0\1\301\1\0\3\301\1\0\1\301"+
    "\20\0\2\301\70\0\1\302\53\0\2\203\1\0\2\203"+
    "\2\0\15\203\1\0\1\203\1\0\5\203\5\0\6\203"+
    "\2\0\6\203\6\0\5\203\32\0\1\303\36\0\1\303"+
    "\55\0\1\304\33\0\1\304\100\0\1\305\62\0\1\306"+
    "\135\0\1\307\13\0\1\307\50\0\1\310\24\0\1\311"+
    "\100\0\1\312\21\0\1\312\62\0\1\313\100\0\1\314"+
    "\33\0\1\314\46\0\1\315\13\0\1\315\2\0\2\315"+
    "\60\0\1\316\7\0\1\316\6\0\4\316\1\0\1\316"+
    "\1\0\3\316\1\0\1\316\20\0\2\316\32\0\1\227"+
    "\107\0\1\226\1\227\107\0\1\226\1\227\1\230\1\233"+
    "\1\0\2\233\1\154\1\155\4\233\1\317\10\233\1\156"+
    "\1\233\1\0\5\233\5\0\6\233\2\0\1\233\1\317"+
    "\4\233\6\0\3\233\2\230\7\0\1\231\1\153\4\0"+
    "\1\226\1\227\1\230\1\233\1\0\2\233\1\154\1\155"+
    "\1\320\14\233\1\156\1\233\1\0\5\233\5\0\6\233"+
    "\2\0\6\233\6\0\3\233\2\230\7\0\1\231\1\153"+
    "\6\0\1\321\2\0\2\321\2\0\2\321\1\0\12\321"+
    "\3\0\1\321\2\0\2\321\5\0\6\321\2\0\6\321"+
    "\6\0\5\321\17\0\2\240\1\0\2\240\2\0\15\240"+
    "\1\0\1\240\1\0\5\240\5\0\6\240\2\0\6\240"+
    "\3\0\1\322\2\0\5\240\20\0\1\241\4\0\1\323"+
    "\2\0\1\241\13\0\1\241\2\0\2\241\1\0\1\324"+
    "\21\0\1\324\4\0\1\325\27\0\1\241\4\0\1\243"+
    "\2\0\1\241\13\0\1\244\2\0\2\241\60\0\1\323"+
    "\7\0\1\323\13\0\1\323\2\0\2\323\60\0\1\241"+
    "\4\0\1\323\2\0\1\241\13\0\1\241\2\326\2\241"+
    "\1\327\1\324\21\0\1\324\4\0\1\325\26\0\1\330"+
    "\2\0\2\330\2\0\2\330\1\0\12\330\3\0\1\330"+
    "\2\0\2\330\5\0\6\330\2\0\6\330\6\0\5\330"+
    "\17\0\1\331\2\0\2\331\2\0\1\332\1\331\1\0"+
    "\1\333\1\334\10\331\3\0\1\331\2\0\2\331\5\0"+
    "\1\335\1\336\1\331\1\337\2\331\2\0\1\340\1\334"+
    "\3\331\1\336\6\0\1\331\1\340\3\331\34\0\1\341"+
    "\1\342\14\0\1\343\21\0\1\343\33\0\2\251\1\0"+
    "\2\251\2\0\15\251\1\0\1\251\1\344\5\251\5\0"+
    "\6\251\2\0\6\251\2\0\1\345\3\0\5\251\17\0"+
    "\1\346\2\0\2\346\2\0\2\346\1\0\12\346\3\0"+
    "\1\346\2\0\2\346\5\0\6\346\2\0\6\346\6\0"+
    "\5\346\17\0\1\347\2\0\2\347\2\0\2\347\1\0"+
    "\12\347\3\0\1\347\2\0\2\347\5\0\6\347\2\0"+
    "\6\347\6\0\5\347\20\0\1\255\1\0\3\255\1\350"+
    "\15\255\1\0\1\255\1\0\5\255\5\0\6\255\2\0"+
    "\6\255\6\0\3\255\22\0\1\154\1\0\3\154\1\155"+
    "\1\154\1\351\12\154\1\352\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\6\154\6\0\3\154\12\0\1\153"+
    "\7\0\1\154\1\0\3\154\1\155\10\154\1\353\4\154"+
    "\1\156\1\154\1\0\5\154\5\0\6\154\2\0\2\154"+
    "\1\353\3\154\6\0\3\154\12\0\1\153\7\0\1\154"+
    "\1\0\3\154\1\155\7\154\1\354\5\154\1\156\1\154"+
    "\1\0\5\154\5\0\6\154\2\0\6\154\6\0\3\154"+
    "\12\0\1\153\7\0\1\355\1\0\1\261\1\355\2\261"+
    "\15\355\1\0\1\355\1\0\5\355\5\0\6\355\2\0"+
    "\6\355\6\0\3\355\22\0\1\154\1\0\3\154\1\155"+
    "\1\356\14\154\1\156\1\154\1\0\5\154\5\0\6\154"+
    "\2\0\6\154\6\0\3\154\12\0\1\153\7\0\1\154"+
    "\1\0\3\154\1\155\15\154\1\156\1\154\1\0\5\154"+
    "\5\0\6\154\2\0\6\154\6\0\3\154\3\0\1\357"+
    "\6\0\1\153\16\0\1\360\105\0\1\361\104\0\1\267"+
    "\1\0\21\267\1\0\1\267\1\0\5\267\5\0\6\267"+
    "\2\0\6\267\6\0\5\267\27\0\1\362\110\0\1\363"+
    "\101\0\1\275\7\0\1\275\13\0\1\275\2\0\2\275"+
    "\54\0\1\302\2\0\1\364\2\0\2\364\2\0\2\364"+
    "\1\0\12\364\3\0\1\364\2\0\2\364\5\0\6\364"+
    "\2\0\6\364\1\365\5\0\5\364\2\0\1\366\56\0"+
    "\1\367\13\0\1\367\45\0\1\370\36\0\1\370\102\0"+
    "\1\371\107\0\1\372\107\0\1\373\13\0\1\373\51\0"+
    "\1\374\33\0\1\374\100\0\1\375\70\0\1\376\133\0"+
    "\1\377\54\0\1\u0100\107\0\1\220\13\0\1\220\2\0"+
    "\2\220\60\0\1\220\7\0\1\220\6\0\4\220\1\0"+
    "\1\220\1\0\3\220\1\0\1\220\20\0\2\220\31\0"+
    "\1\226\1\227\1\230\1\233\1\0\2\233\1\154\1\155"+
    "\1\u0101\14\233\1\156\1\233\1\0\5\233\5\0\6\233"+
    "\2\0\6\233\6\0\3\233\2\230\7\0\1\231\1\153"+
    "\4\0\1\226\1\227\1\230\1\233\1\0\2\233\1\154"+
    "\1\155\15\233\1\156\1\233\1\0\5\233\5\0\6\233"+
    "\2\0\6\233\6\0\3\233\2\230\1\0\1\357\5\0"+
    "\1\231\1\153\6\0\2\321\1\0\2\321\2\0\15\321"+
    "\1\0\1\321\1\0\5\321\5\0\6\321\2\0\6\321"+
    "\6\0\5\321\20\0\1\323\7\0\1\323\13\0\1\323"+
    "\2\0\2\323\1\0\1\324\21\0\1\324\4\0\1\325"+
    "\27\0\1\u0102\3\0\1\u0103\3\0\1\u0102\13\0\1\u0102"+
    "\2\0\2\u0102\2\0\1\u0103\101\0\1\u0104\2\0\1\u0104"+
    "\61\0\1\u0105\7\0\1\u0105\6\0\4\u0105\1\0\1\u0105"+
    "\1\0\3\u0105\1\0\1\u0105\20\0\2\u0105\33\0\2\330"+
    "\1\0\2\330\2\0\15\330\1\0\1\330\1\0\5\330"+
    "\5\0\6\330\2\0\6\330\3\0\1\u0106\2\0\5\330"+
    "\17\0\2\331\1\0\2\331\2\0\15\331\1\0\1\331"+
    "\1\0\5\331\5\0\6\331\2\0\6\331\6\0\5\331"+
    "\17\0\2\331\1\0\2\331\2\0\14\331\1\u0107\1\0"+
    "\1\331\1\0\5\331\5\0\1\331\1\u0108\4\331\2\0"+
    "\5\331\1\u0108\6\0\5\331\17\0\2\331\1\0\2\331"+
    "\2\0\15\331\1\0\1\331\1\0\4\331\1\u0109\5\0"+
    "\6\331\2\0\4\331\1\u0109\1\331\6\0\5\331\17\0"+
    "\2\331\1\0\2\331\2\0\1\331\1\u010a\13\331\1\0"+
    "\1\331\1\0\5\331\5\0\6\331\2\0\6\331\6\0"+
    "\5\331\17\0\2\331\1\0\2\331\2\0\6\331\1\u010b"+
    "\6\331\1\0\1\331\1\0\5\331\5\0\6\331\2\0"+
    "\6\331\6\0\5\331\17\0\2\331\1\0\2\331\2\0"+
    "\15\331\1\0\1\331\1\0\4\331\1\u010c\5\0\6\331"+
    "\2\0\4\331\1\u010c\1\331\6\0\5\331\17\0\2\331"+
    "\1\0\2\331\2\0\3\331\1\u010d\11\331\1\0\1\331"+
    "\1\0\5\331\5\0\6\331\2\0\6\331\6\0\5\331"+
    "\17\0\2\331\1\0\2\331\2\0\14\331\1\u010e\1\0"+
    "\1\331\1\0\5\331\5\0\6\331\2\0\6\331\6\0"+
    "\5\331\35\0\1\u010f\111\0\1\u0110\33\0\1\u0110\67\0"+
    "\1\u0111\56\0\1\251\2\0\2\251\2\0\2\251\1\0"+
    "\12\251\3\0\1\251\2\0\2\251\5\0\6\251\2\0"+
    "\6\251\4\0\1\252\1\0\5\251\101\0\1\u0112\26\0"+
    "\2\346\1\0\2\346\2\0\15\346\1\0\1\346\1\252"+
    "\5\346\5\0\6\346\2\0\6\346\2\0\1\u0113\2\0"+
    "\1\u0114\5\346\17\0\2\347\1\0\2\347\2\0\15\347"+
    "\1\0\1\347\1\0\5\347\5\0\6\347\2\0\6\347"+
    "\6\0\5\347\20\0\1\u0115\1\0\21\u0115\1\0\1\u0115"+
    "\1\0\5\u0115\5\0\6\u0115\2\0\6\u0115\6\0\3\u0115"+
    "\22\0\1\154\1\0\3\154\1\155\1\u0116\3\154\1\u0117"+
    "\10\154\1\156\1\154\1\0\5\154\5\0\6\154\2\0"+
    "\1\154\1\u0117\4\154\6\0\3\154\12\0\1\153\7\0"+
    "\1\154\1\0\3\154\1\155\4\154\1\u0118\10\154\1\156"+
    "\1\154\1\0\5\154\5\0\6\154\2\0\1\154\1\u0118"+
    "\4\154\6\0\3\154\12\0\1\153\7\0\1\154\1\0"+
    "\3\154\1\155\11\154\1\u0119\3\154\1\156\1\154\1\0"+
    "\5\154\5\0\6\154\2\0\6\154\6\0\3\154\12\0"+
    "\1\153\7\0\1\154\1\0\3\154\1\155\13\154\1\u011a"+
    "\1\154\1\156\1\154\1\0\5\154\5\0\6\154\2\0"+
    "\3\154\1\u011a\2\154\6\0\3\154\12\0\1\153\7\0"+
    "\1\355\1\0\1\261\1\355\2\261\15\355\1\156\1\355"+
    "\1\0\5\355\5\0\6\355\2\0\6\355\6\0\3\355"+
    "\22\0\1\154\1\0\3\154\1\155\3\154\1\263\11\154"+
    "\1\156\1\154\1\0\5\154\5\0\6\154\2\0\6\154"+
    "\6\0\3\154\3\0\1\357\6\0\1\153\32\0\1\u011b"+
    "\73\0\1\265\110\0\1\271\110\0\1\274\77\0\1\u011c"+
    "\1\u011d\2\364\1\0\2\364\2\0\15\364\1\0\1\364"+
    "\1\0\5\364\5\0\6\364\2\0\6\364\6\0\5\364"+
    "\17\0\1\u011e\2\0\2\u011e\2\0\2\u011e\1\0\12\u011e"+
    "\3\0\1\u011e\2\0\2\u011e\5\0\6\u011e\2\0\6\u011e"+
    "\6\0\5\u011e\17\0\1\u011f\2\0\2\u011f\2\0\2\u011f"+
    "\1\0\12\u011f\3\0\1\u011f\2\0\2\u011f\5\0\6\u011f"+
    "\2\0\6\u011f\6\0\5\u011f\35\0\1\u0120\67\0\1\u0121"+
    "\35\0\1\u0122\21\0\1\u0122\6\0\1\u0123\53\0\1\u0124"+
    "\104\0\1\u0125\110\0\1\u0126\110\0\1\u0127\102\0\1\u0128"+
    "\110\0\1\u0121\126\0\1\u0129\21\0\1\u0129\66\0\1\u0125"+
    "\21\0\1\u0125\31\0\1\226\1\227\1\230\1\233\1\0"+
    "\2\233\1\154\1\155\3\233\1\320\11\233\1\156\1\233"+
    "\1\0\5\233\5\0\6\233\2\0\6\233\6\0\3\233"+
    "\2\230\1\0\1\357\5\0\1\231\1\153\7\0\1\u0102"+
    "\7\0\1\u0102\13\0\1\u0102\2\0\2\u0102\30\0\1\325"+
    "\27\0\1\u0102\7\0\1\u0102\13\0\1\u0102\2\0\2\u0102"+
    "\104\0\1\u0104\2\0\1\u0104\31\0\1\325\27\0\1\u0105"+
    "\7\0\1\u0105\6\0\4\u0105\1\0\1\u0105\1\0\3\u0105"+
    "\1\0\1\u0105\20\0\2\u0105\4\0\1\325\26\0\2\331"+
    "\1\0\2\331\2\0\15\331\1\0\1\331\1\0\5\331"+
    "\5\0\1\331\1\u012a\4\331\2\0\5\331\1\u012a\6\0"+
    "\5\331\17\0\2\331\1\0\2\331\2\0\15\331\1\0"+
    "\1\331\1\0\5\331\5\0\2\331\1\u012b\3\331\2\0"+
    "\6\331\6\0\5\331\17\0\2\331\1\0\2\331\2\0"+
    "\15\331\1\0\1\331\1\0\4\331\1\u012c\5\0\6\331"+
    "\2\0\4\331\1\u012c\1\331\6\0\5\331\17\0\2\331"+
    "\1\0\2\331\2\0\15\331\1\0\1\331\1\0\5\331"+
    "\5\0\1\331\1\u012d\4\331\2\0\5\331\1\u012d\6\0"+
    "\5\331\17\0\2\331\1\0\2\331\2\0\15\331\1\0"+
    "\1\331\1\0\5\331\5\0\2\331\1\u012e\3\331\2\0"+
    "\6\331\6\0\5\331\17\0\2\331\1\0\2\331\2\0"+
    "\4\331\1\u012f\10\331\1\0\1\331\1\0\5\331\5\0"+
    "\6\331\2\0\1\331\1\u012f\4\331\6\0\5\331\17\0"+
    "\2\331\1\0\2\331\2\0\15\331\1\0\1\331\1\0"+
    "\4\331\1\u0130\5\0\6\331\2\0\4\331\1\u0130\1\331"+
    "\6\0\5\331\17\0\2\331\1\0\2\331\2\0\15\331"+
    "\1\0\1\331\1\0\5\331\5\0\1\331\1\u012c\4\331"+
    "\2\0\5\331\1\u012c\6\0\5\331\36\0\1\u0131\33\0"+
    "\1\u0131\45\0\1\u0132\2\0\1\u0133\36\0\1\u0133\61\0"+
    "\1\u0134\113\0\1\344\144\0\1\u0135\107\0\1\345\30\0"+
    "\1\154\1\0\3\154\1\155\2\154\2\u0119\11\154\1\156"+
    "\1\154\1\0\5\154\5\0\6\154\2\0\6\154\6\0"+
    "\3\154\12\0\1\153\7\0\1\154\1\0\3\154\1\155"+
    "\5\154\1\u0136\7\154\1\156\1\154\1\0\5\154\5\0"+
    "\6\154\2\0\6\154\6\0\3\154\12\0\1\153\7\0"+
    "\1\154\1\0\3\154\1\155\11\154\1\u0137\3\154\1\156"+
    "\1\154\1\0\5\154\5\0\6\154\2\0\6\154\6\0"+
    "\3\154\12\0\1\153\7\0\1\154\1\0\3\154\1\155"+
    "\13\154\1\u0119\1\154\1\156\1\154\1\0\5\154\5\0"+
    "\6\154\2\0\3\154\1\u0119\2\154\6\0\3\154\12\0"+
    "\1\153\32\0\1\u0138\63\0\1\u011d\111\0\2\u011e\1\0"+
    "\2\u011e\2\0\15\u011e\1\0\1\u011e\1\0\5\u011e\5\0"+
    "\6\u011e\2\0\6\u011e\1\u0139\5\0\5\u011e\17\0\2\u011f"+
    "\1\0\2\u011f\2\0\15\u011f\1\0\1\u011f\1\0\5\u011f"+
    "\5\0\6\u011f\2\0\6\u011f\6\0\5\u011f\2\0\1\u0139"+
    "\33\0\1\u013a\33\0\1\u013a\32\0\1\u0121\66\0\1\u0123"+
    "\65\0\1\u013b\64\0\1\u013c\106\0\1\u0121\36\0\1\u0121"+
    "\103\0\1\u0121\105\0\1\u0126\13\0\1\u0126\27\0\1\u0121"+
    "\35\0\1\u013d\21\0\1\u013d\6\0\1\u0123\44\0\1\u0125"+
    "\70\0\2\331\1\0\2\331\2\0\14\331\1\u013e\1\0"+
    "\1\331\1\0\5\331\5\0\6\331\2\0\6\331\6\0"+
    "\5\331\17\0\2\331\1\0\2\331\2\0\1\u013f\14\331"+
    "\1\0\1\331\1\0\5\331\5\0\6\331\2\0\6\331"+
    "\6\0\5\331\17\0\2\331\1\0\2\331\2\0\15\331"+
    "\1\0\1\331\1\0\5\331\5\0\2\331\1\u0140\3\331"+
    "\2\0\6\331\6\0\5\331\17\0\2\331\1\0\2\331"+
    "\2\0\15\331\1\0\1\331\1\0\1\u0141\4\331\5\0"+
    "\6\331\2\0\6\331\6\0\5\331\17\0\2\331\1\0"+
    "\2\331\2\0\15\331\1\0\1\331\1\0\5\331\5\0"+
    "\3\331\1\u0142\2\331\2\0\6\331\6\0\5\331\17\0"+
    "\2\331\1\0\2\331\2\0\3\331\1\u0143\11\331\1\0"+
    "\1\331\1\0\5\331\5\0\6\331\2\0\6\331\6\0"+
    "\5\331\106\0\1\u0144\54\0\1\u0145\21\0\1\u0145\66\0"+
    "\1\u0146\21\0\1\u0146\47\0\1\u0147\122\0\1\252\35\0"+
    "\1\u0114\25\0\1\154\1\0\3\154\1\155\6\154\1\u0119"+
    "\6\154\1\156\1\154\1\0\5\154\5\0\6\154\2\0"+
    "\6\154\6\0\3\154\12\0\1\153\7\0\1\154\1\0"+
    "\3\154\1\155\1\154\1\u0119\13\154\1\156\1\154\1\0"+
    "\5\154\5\0\6\154\2\0\6\154\6\0\3\154\12\0"+
    "\1\153\7\0\25\u0148\1\0\6\u0148\1\0\2\u0148\1\0"+
    "\16\u0148\1\0\1\u0148\4\0\3\u0148\2\0\2\u0148\5\0"+
    "\3\u0148\3\0\1\u011c\1\u011d\152\0\1\u0121\102\0\1\u0149"+
    "\21\0\1\u0149\66\0\1\u0121\21\0\1\u0121\56\0\1\u014a"+
    "\65\0\2\331\1\0\2\331\2\0\5\331\1\u014b\7\331"+
    "\1\0\1\331\1\0\5\331\5\0\6\331\2\0\6\331"+
    "\6\0\5\331\17\0\2\331\1\0\2\331\2\0\15\331"+
    "\1\0\1\331\1\0\4\331\1\u014c\5\0\6\331\2\0"+
    "\4\331\1\u014c\1\331\6\0\5\331\17\0\2\331\1\0"+
    "\2\331\2\0\15\331\1\0\1\331\1\0\5\331\5\0"+
    "\6\331\2\0\6\331\6\0\1\u014d\4\331\17\0\2\331"+
    "\1\0\2\331\2\0\14\331\1\u014e\1\0\1\331\1\0"+
    "\5\331\5\0\6\331\2\0\6\331\6\0\5\331\17\0"+
    "\2\331\1\0\2\331\2\0\15\331\1\0\1\331\1\0"+
    "\5\331\5\0\1\331\1\u014f\4\331\2\0\5\331\1\u014f"+
    "\6\0\5\331\61\0\1\u0150\13\0\1\u0150\74\0\1\u0151"+
    "\13\0\1\u0151\41\0\1\u0152\102\0\1\u0153\2\u0148\1\u0153"+
    "\2\u0148\17\u0153\1\0\5\u0153\1\u0148\1\0\2\u0148\1\0"+
    "\6\u0153\2\u0148\6\u0153\1\0\1\u0148\4\0\3\u0153\2\0"+
    "\2\u0148\5\0\3\u0148\47\0\1\u0121\13\0\1\u0121\51\0"+
    "\1\u0121\33\0\1\u0121\35\0\2\331\1\0\2\331\2\0"+
    "\15\331\1\0\1\331\1\0\5\331\5\0\1\331\1\u0154"+
    "\4\331\2\0\5\331\1\u0154\6\0\5\331\17\0\2\331"+
    "\1\0\2\331\2\0\3\331\1\u012c\11\331\1\0\1\331"+
    "\1\0\5\331\5\0\6\331\2\0\6\331\6\0\5\331"+
    "\17\0\2\331\1\0\2\331\2\0\6\331\1\u014b\6\331"+
    "\1\0\1\331\1\0\5\331\5\0\6\331\2\0\6\331"+
    "\6\0\5\331\17\0\2\331\1\0\2\331\2\0\10\331"+
    "\1\u012c\4\331\1\0\1\331\1\0\5\331\5\0\6\331"+
    "\2\0\2\331\1\u012c\3\331\6\0\5\331\35\0\1\u0155"+
    "\111\0\1\u0156\33\0\1\u0156\52\0\1\u0157\73\0\2\331"+
    "\1\0\2\331\2\0\4\331\1\u0158\10\331\1\0\1\331"+
    "\1\0\5\331\5\0\6\331\2\0\1\331\1\u0158\4\331"+
    "\6\0\5\331\32\0\1\u0159\36\0\1\u0159\61\0\1\u015a"+
    "\120\0\1\u0144\21\0\1\u0144\33\0\2\331\1\0\2\331"+
    "\2\0\15\331\1\0\1\331\1\0\5\331\5\0\4\331"+
    "\1\u015b\1\331\2\0\6\331\6\0\5\331\40\0\1\u015c"+
    "\104\0\1\u0144\73\0\2\331\1\0\2\331\1\u015d\1\0"+
    "\15\331\1\0\1\331\1\0\5\331\5\0\6\331\2\0"+
    "\6\331\6\0\5\331\62\0\1\u015e\107\0\1\u015f\13\0"+
    "\1\u015f\6\0\1\u0160\43\0\1\u0144\123\0\1\u0161\21\0"+
    "\1\u0161\75\0\1\u0162\13\0\1\u0162\55\0\1\u0163\103\0"+
    "\1\u0164\113\0\1\u0165\102\0\1\u0166\36\0\1\u0166\71\0"+
    "\1\u0165\21\0\1\u0165\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21097];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\26\0\1\11\2\1\1\11\1\1\1\11\5\1\2\11"+
    "\2\1\1\11\4\1\1\11\1\1\1\11\2\1\3\11"+
    "\2\1\1\11\14\1\1\11\1\1\5\11\2\1\2\11"+
    "\16\1\1\11\1\1\3\11\7\1\1\11\2\1\10\0"+
    "\1\11\1\1\2\0\1\11\1\1\1\0\2\1\2\0"+
    "\1\1\4\0\1\11\1\1\12\0\1\1\1\0\6\11"+
    "\1\1\1\11\6\0\1\11\12\0\1\1\13\0\1\11"+
    "\1\0\1\1\1\0\2\11\1\0\1\11\1\1\1\0"+
    "\1\11\2\1\13\0\2\1\2\0\1\1\1\11\2\0"+
    "\1\11\3\0\10\1\6\0\1\1\5\0\1\1\3\0"+
    "\1\11\24\0\1\11\10\1\3\0\1\1\2\0\2\1"+
    "\2\0\1\1\2\0\1\1\1\11\5\0\1\11\6\0"+
    "\7\1\15\0\6\1\1\11\6\0\5\1\3\0\2\1"+
    "\3\0\1\1\2\0\1\1\11\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[358];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private final static Set<String> PSEUDO_TYPES;
  private Stack<String> docLabels = new Stack<String>();
  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }

  static {
    PSEUDO_TYPES = new HashSet<String>(Arrays.asList(
        new String[] {
            "string", "integer", "int", "boolean", "bool", "float", "double",
            "object", "mixed", "array", "resource", "void", "null", "callback",
            "false", "true", "self", "callable"
        }
    ));
  }

  private void writeDocTag() throws IOException {
    out.write(yycharat(0));
    out.write("<strong>");
    out.write(Util.htmlize(yytext().substring(1)));
    out.write("</strong>");
  }

  private boolean isTabOrSpace(int i) {
    return yycharat(i) == '\t' || yycharat(i) == ' ';
  }

  private static boolean isHtmlState(int state) {
    return state == TAG_NAME            || state == AFTER_TAG_NAME
        || state == ATTRIBUTE_NOQUOTE   || state == ATTRIBUTE_SINGLE
        || state == ATTRIBUTE_DOUBLE    || state == HTMLCOMMENT
        || state == YYINITIAL;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhpXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PhpXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { out.write("</span>");
        startNewLine();
        yypop();
          }
        case 69: break;
        case 62: 
          { String path = yytext();
            out.write("<a href=\""+urlPrefix+"path=");
            out.write(path);
            appendProject();
            out.write("\">");
            out.write(path);
            out.write("</a>");
          }
        case 70: break;
        case 51: 
          { out.write("--&gt;</span>");
        yybegin(YYINITIAL);
          }
        case 71: break;
        case 9: 
          { out.write( "&lt;");
          }
        case 72: break;
        case 64: 
          { out.write("(");
        int i = 1, j;
        while (isTabOrSpace(i)) { out.write(yycharat(i++)); }

        out.write("<em>");
        j = i + 1;
        while (!isTabOrSpace(j) && yycharat(j) != ')') { j++; }
        out.write(yytext().substring(i, j));
        out.write("</em>");

        out.write(yytext().substring(j, yylength()));
          }
        case 73: break;
        case 19: 
          { out.write("</span>");
        startNewLine();
        out.write("<span class=\"c\">");
          }
        case 74: break;
        case 68: 
          { String url = yytext();
            out.write("<a href=\"");
            out.write(url);out.write("\">");
            out.write(url);out.write("</a>");
          }
        case 75: break;
        case 58: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 76: break;
        case 16: 
          { out.write("</span>");
        startNewLine();
        out.write("<span class=\"s\">");
          }
        case 77: break;
        case 36: 
          { out.write("<strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        yypush(IN_SCRIPT, null);
          }
        case 78: break;
        case 34: 
          { yypushback(1); yypop();
          }
        case 79: break;
        case 42: 
          { out.write("<strong>");
        out.write(yytext());
        out.write("</strong>");
          }
        case 80: break;
        case 39: 
          { yypush(COMMENT, null); out.write("<span class=\"c\">/*");
          }
        case 81: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 82: break;
        case 23: 
          { yypush(STRING, null);
        if (yycharat(0) == 'b') { out.write('b'); }
        out.write("<span class=\"s\">\"");
          }
        case 83: break;
        case 61: 
          { writeEMailAddress(yytext());
          }
        case 84: break;
        case 46: 
          { out.write("</span><strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        while (!isHtmlState(yystate()))
            yypop();
          }
        case 85: break;
        case 8: 
          { out.write("<span class=\"n\">");
        out.write(yytext());
        out.write("</span>");
        yybegin(AFTER_TAG_NAME);
          }
        case 86: break;
        case 17: 
          { out.write("'</span>"); yypop();
          }
        case 87: break;
        case 26: 
          { out.write(yytext()); yypush(IN_SCRIPT, null);
          }
        case 88: break;
        case 38: 
          { out.write("</span><strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        yypush(IN_SCRIPT, "<span class=\"c\">");
          }
        case 89: break;
        case 65: 
          { writeDocTag(); yybegin(DOCCOM_TYPE);
          }
        case 90: break;
        case 56: 
          { writeDocTag();
          }
        case 91: break;
        case 37: 
          { out.write("</span><strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        yypush(IN_SCRIPT, "<span class=\"s\">");
          }
        case 92: break;
        case 59: 
          { out.write("<span class=\"c\">&lt;!--");
        yybegin(HTMLCOMMENT);
          }
        case 93: break;
        case 7: 
          { out.write( "&amp;");
          }
        case 94: break;
        case 44: 
          { out.write("</span>");
        out.write(yytext());
        yypush(STRINGEXPR, "<span class=\"s\">");
          }
        case 95: break;
        case 25: 
          { yypush(SCOMMENT, null); out.write("<span class=\"c\">" + yytext());
          }
        case 96: break;
        case 29: 
          { out.write("</span>$");
        yypush(STRINGVAR, "<span class=\"s\">");
          }
        case 97: break;
        case 52: 
          { yypush(DOCCOMMENT, null); out.write("<span class=\"c\">/*"); yypushback(1);
          }
        case 98: break;
        case 67: 
          { writeDocTag(); yybegin(DOCCOM_TYPE_THEN_NAME);
          }
        case 99: break;
        case 54: 
          { //then the identifier is actually a string!
        out.write("[<span class=\"s\">");
        out.write(yytext().substring(1, yylength()-1));
        out.write("</span>]");
        yypop();
          }
        case 100: break;
        case 33: 
          { out.write('}'); yypop();
          }
        case 101: break;
        case 40: 
          { out.write("<strong>");
        out.write(Util.htmlize(yytext()));
        out.write("</strong>");
        while (!isHtmlState(yystate()))
            yypop();
          }
        case 102: break;
        case 12: 
          { char attributeDelim = yycharat(yylength()-1);
        out.write("=<span class=\"s\">");
        out.write(yytext().substring(1));
        if (attributeDelim == '\'') {
            yypush(ATTRIBUTE_SINGLE, null);
        } else if (attributeDelim == '"') {
            yypush(ATTRIBUTE_DOUBLE, null);
        } else {
            yypush(ATTRIBUTE_NOQUOTE, null);
        }
          }
        case 103: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 104: break;
        case 6: 
          { out.write( "&gt;");
          }
        case 105: break;
        case 10: 
          { out.write("&gt;"); yypop();
          }
        case 106: break;
        case 43: 
          { out.write("<strong>"); out.write(yytext()); out.write("</strong>");
          }
        case 107: break;
        case 66: 
          { writeDocTag(); yybegin(DOCCOM_NAME);
          }
        case 108: break;
        case 24: 
          { yypush(BACKQUOTE, null); out.write("<span class=\"s\">`");
          }
        case 109: break;
        case 5: 
          { out.write(Util.htmlize(yytext())); yypush(TAG_NAME, null);
          }
        case 110: break;
        case 13: 
          { out.write(yytext());
        out.write("</span>");
        yypop();
          }
        case 111: break;
        case 53: 
          { out.write("-&gt;");
        writeSymbol(yytext().substring(2), null, yyline);
        yypop(); //because "$arr->a[0]" is the same as $arr->a . "[0]"
          }
        case 112: break;
        case 15: 
          { out.write("&gt;</span>"); yypop(); yypop();
          }
        case 113: break;
        case 32: 
          { out.write('['); yybegin(IN_SCRIPT);
          }
        case 114: break;
        case 50: 
          { out.write("<span class=\"n\">");
        int i = 0;
        while (yycharat(i) != ':') i++;
        out.write(yytext().substring(0,i));
        out.write("</span>:<span class=\"n\">");
        out.write(yytext().substring(i + 1));
        out.write("</span>");
        yybegin(AFTER_TAG_NAME);
          }
        case 115: break;
        case 20: 
          { writeSymbol(yytext(), Consts.kwd, yyline);
          }
        case 116: break;
        case 3: 
          { startNewLine();
          }
        case 117: break;
        case 21: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 118: break;
        case 55: 
          { out.write("[<span class=\"n\">");
        out.write(yytext().substring(1, yylength()-1));
        out.write("</span>]");
        yypop(); //because "$arr[0][1]" is the same as $arr[0] . "[1]"
          }
        case 119: break;
        case 49: 
          { int i = 0;
        do { out.write(yycharat(i++)); } while (isTabOrSpace(i));
        int j = i;
        while (i < yylength()) {
            //skip over [], |, ( and )
            char c;
            while (i < yylength() && ((c = yycharat(i)) == '[' || c == ']'
                    || c == '|' || c == '(' || c == ')')) {
                out.write(c);
                i++;
            }
            j = i;
            while (j < yylength() && (c = yycharat(j)) != ')' && c != '|'
            && c != '[') { j++; }
            out.write("<em>");
            writeSymbol(Util.htmlize(yytext().substring(i, j)),
                    PSEUDO_TYPES, yyline, false);
            out.write("</em>");
            i = j;
        }
        yybegin(yystate() == DOCCOM_TYPE_THEN_NAME ? DOCCOM_NAME : DOCCOMMENT);
          }
        case 120: break;
        case 28: 
          { out.write("</span>");
    startNewLine();
    out.write("<span class=\"s\">");
          }
        case 121: break;
        case 60: 
          { out.write("[$");
        writeSymbol(yytext().substring(2, yylength()-1), null, yyline);
        out.write("]");
        yypop();
          }
        case 122: break;
        case 18: 
          { out.write("\"</span>"); yypop();
          }
        case 123: break;
        case 63: 
          { if (yycharat(0) == 'b') { out.write('b'); }
        out.write("&lt;&lt;&lt;");
        int i = yycharat(0) == 'b' ? 4 : 3, j = yylength()-1;
        while (isTabOrSpace(i)) {
            out.write(yycharat(i++));
        }
        while (yycharat(j) == '\n' || yycharat(j) == '\r') { j--; }

        if (yycharat(i) == '\'' || yycharat(i) == '"') {
            yypush(NOWDOC, null);
            String text = yytext().substring(i+1, j);
            this.docLabels.push(text);
            out.write(yycharat(i));
            out.write("<span class=\"b\">");
            out.write(text);
            out.write("</span>");
            out.write(yycharat(i));
        } else {
            yypush(HEREDOC, null);
            String text = yytext().substring(i, j+1);
            this.docLabels.push(text);
            out.write("<span class=\"b\">");
            out.write(text);
            out.write("</span>");
        }
        startNewLine();
        out.write("<span class=\"s\">");
          }
        case 124: break;
        case 48: 
          { out.write("*/</span>"); yypop();
          }
        case 125: break;
        case 35: 
          { yybegin(DOCCOMMENT); yypushback(1);
          }
        case 126: break;
        case 27: 
          { out.write(yytext());
        if (!this.stack.empty() && !isHtmlState(this.stack.peek()))
            yypop(); //may pop STRINGEXPR/HEREDOC/BACKQUOTE
        /* we don't pop unconditionally because we can exit a <?php block with
         * with open braces and we discard the information about the number of
         * open braces when exiting the block (see the action for {ClosingTag}
         * below. An alternative would be keeping two stacks -- one for HTML
         * and another for PHP. The PHP scanner only needs one stack because
         * it doesn't need to keep state about the HTML */
          }
        case 127: break;
        case 11: 
          { out.write("<strong>");
        out.write(yytext()); //attribute
        out.write("</strong>");
          }
        case 128: break;
        case 47: 
          { int i = yylength() - 1;
    boolean hasSemi = false;
    while (yycharat(i) == '\n' || yycharat(i) == '\r') { i--; }
    if (yycharat(i) == ';') { hasSemi = true; i--; }
    if (yytext().substring(0, i+1).equals(this.docLabels.peek())) {
        String text = this.docLabels.pop();
        yypop();
        out.write("</span><span class=\"b\">");
        out.write(text);
        out.write("</span>");
        if (hasSemi) out.write(";");
        startNewLine();
    } else {
        out.write(yytext().substring(0,i+1));
        if (hasSemi) out.write(";");
        startNewLine();
    }
          }
        case 129: break;
        case 30: 
          { out.write("`</span>"); yypop();
          }
        case 130: break;
        case 45: 
          { out.write("</span>");
        out.write("{");
        yypushback(1);
        yypush(IN_SCRIPT, "<span class=\"s\">");
          }
        case 131: break;
        case 41: 
          { //we ignore keywords if the identifier starts with one of variable chars
        String id = yytext().substring(1);
        out.write("$");
        writeSymbol(id, null, yyline);
          }
        case 132: break;
        case 22: 
          { yypush(QSTRING, null);
        if (yycharat(0) == 'b') { out.write('b'); }
        out.write("<span class=\"s\">\'");
          }
        case 133: break;
        case 31: 
          { writeSymbol(yytext(), null, yyline);
          }
        case 134: break;
        case 2: 
          { out.write(yytext());
          }
        case 135: break;
        case 57: 
          { int i = 0;
        do { out.write(yycharat(i++)); } while (isTabOrSpace(i));

        out.write("<em>$");
        writeSymbol(Util.htmlize(yytext().substring(i + 1)), null, yyline);
        out.write("</em>");
        yybegin(DOCCOMMENT);
          }
        case 136: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
