/* The following code was generated by JFlex 1.4.3 on 11/20/12 3:29 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2006, 2011, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Javascript file
 */

package org.opensolaris.opengrok.analysis.javascript;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/20/12 3:29 PM from the specification file
 * <tt>/home/mssun/Desktop/opengrok-dev/src/org/opensolaris/opengrok/analysis/javascript/JavaScriptXref.lex</tt>
 */
public class JavaScriptXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;
  public static final int SCOMMENT = 6;
  public static final int QSTRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\43"+
    "\1\50\1\7\1\6\1\47\1\44\2\50\1\45\1\37\1\6\1\10"+
    "\1\12\1\34\1\35\11\5\1\51\1\6\1\41\1\6\1\42\1\6"+
    "\1\52\1\33\1\36\1\26\1\32\1\20\1\30\1\4\1\31\1\22"+
    "\1\13\1\4\1\25\1\24\1\27\1\17\1\15\1\4\1\16\1\14"+
    "\1\21\1\40\2\4\1\23\2\4\1\50\1\46\2\50\1\11\1\50"+
    "\1\33\1\36\1\26\1\32\1\20\1\30\1\4\1\31\1\22\1\13"+
    "\1\4\1\25\1\24\1\27\1\17\1\15\1\4\1\16\1\14\1\21"+
    "\1\40\2\4\1\23\2\4\3\50\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\2\3\1\4\1\5\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\5\4\1\6\1\13"+
    "\2\4\1\2\2\14\1\15\1\4\1\16\2\0\1\5"+
    "\1\17\1\20\14\0\1\21\1\22\1\23\1\0\1\24"+
    "\2\5\1\0\1\5\17\0\1\2\1\5\11\0\1\25"+
    "\10\0\1\26\20\0\1\25\1\27\1\0\1\30\15\0"+
    "\1\31\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\327\0\u0158\0\u0183\0\327\0\u01ae\0\u01d9\0\u0204\0\327"+
    "\0\327\0\327\0\327\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db"+
    "\0\327\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2\0\327\0\u03dd"+
    "\0\u0408\0\u0158\0\u0433\0\u045e\0\u0489\0\327\0\327\0\u04b4"+
    "\0\u04df\0\u050a\0\u022f\0\u0535\0\u0560\0\u058b\0\u025a\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\327\0\327\0\327\0\u0662\0\327"+
    "\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\u0968\0\u0993\0\327\0\u09be\0\u09e9\0\u0a14\0\u0a3f"+
    "\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u022f\0\u0b6c"+
    "\0\u0b97\0\u0bc2\0\u0bed\0\u0c18\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4"+
    "\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74"+
    "\0\u0c18\0\u0cef\0\u0f9f\0\327\0\u0fca\0\u0ff5\0\u1020\0\u104b"+
    "\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3"+
    "\0\u11ce\0\u1178\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\12"+
    "\1\14\1\12\1\14\21\12\1\15\1\16\1\12\1\14"+
    "\1\12\1\17\1\20\1\21\1\22\2\14\1\23\3\14"+
    "\1\6\1\7\1\10\1\11\1\24\1\25\2\14\3\25"+
    "\15\24\1\26\1\27\2\24\1\30\1\25\1\24\1\14"+
    "\1\24\1\31\1\20\1\32\2\14\1\33\1\23\3\14"+
    "\1\6\1\7\1\10\1\11\1\24\1\25\2\14\3\25"+
    "\15\24\1\26\1\27\2\24\1\30\1\25\1\24\1\14"+
    "\1\24\1\31\1\20\2\14\1\34\1\14\1\23\3\14"+
    "\1\6\1\35\1\36\1\37\1\24\1\25\2\14\3\25"+
    "\15\24\1\26\1\27\2\24\1\30\1\25\1\24\1\14"+
    "\1\24\1\31\1\20\4\14\1\23\3\14\1\6\1\7"+
    "\1\10\1\11\1\24\1\25\2\14\3\25\15\24\1\26"+
    "\1\27\2\24\1\30\1\25\1\24\1\14\1\24\1\31"+
    "\1\20\1\14\1\40\1\14\1\41\1\23\3\14\54\0"+
    "\1\7\1\10\1\11\52\0\1\11\53\0\2\42\1\0"+
    "\1\42\1\0\1\42\1\0\21\42\1\0\2\42\1\0"+
    "\1\42\17\0\1\13\4\0\1\43\5\0\1\44\4\0"+
    "\1\45\2\0\1\45\1\0\1\45\2\0\1\13\2\0"+
    "\1\45\46\0\1\46\10\0\1\47\12\0\1\13\4\0"+
    "\1\43\5\0\1\44\2\0\1\50\1\0\1\45\2\0"+
    "\1\45\1\0\1\45\2\0\1\13\2\0\1\45\16\0"+
    "\1\51\6\0\21\51\1\52\1\0\1\51\1\0\1\51"+
    "\16\0\2\53\2\0\2\53\1\54\21\53\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\4\0\2\57\2\0\24\57"+
    "\1\0\2\57\1\0\1\57\11\0\1\56\4\0\2\53"+
    "\2\0\2\53\1\54\6\53\1\60\12\53\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\4\0\2\53\2\0\2\53"+
    "\1\54\6\53\1\61\12\53\1\55\2\53\1\0\1\53"+
    "\11\0\1\56\4\0\1\62\6\0\21\62\2\0\1\62"+
    "\1\0\1\62\13\0\1\63\114\0\1\64\2\0\1\65"+
    "\40\0\1\66\17\0\1\35\1\36\1\37\52\0\1\37"+
    "\50\0\1\67\115\0\1\70\1\0\1\65\11\0\1\71"+
    "\27\0\1\71\22\0\1\72\2\0\1\73\24\0\1\72"+
    "\1\0\1\73\40\0\1\45\2\0\1\45\1\0\1\45"+
    "\5\0\1\45\17\0\1\74\12\0\1\74\5\0\1\74"+
    "\1\0\1\74\1\0\2\74\1\0\2\74\20\0\2\51"+
    "\2\0\2\51\1\75\21\51\1\76\2\51\1\0\1\51"+
    "\16\0\1\77\6\0\21\77\2\0\1\77\1\0\1\77"+
    "\16\0\2\53\2\0\2\53\1\54\1\100\1\53\1\101"+
    "\3\53\1\102\1\103\1\104\2\53\1\105\2\53\1\106"+
    "\1\107\1\53\1\55\2\53\1\0\1\53\11\0\1\56"+
    "\4\0\1\110\6\0\21\110\2\0\1\110\1\0\1\110"+
    "\16\0\2\111\2\0\24\111\1\0\2\111\1\0\1\111"+
    "\16\0\2\53\2\0\2\53\1\54\2\53\1\112\16\53"+
    "\1\55\2\53\1\0\1\53\11\0\1\56\4\0\2\53"+
    "\2\0\2\53\1\54\6\53\1\113\12\53\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\4\0\2\62\2\0\24\62"+
    "\1\55\2\62\1\0\1\62\13\0\1\63\41\0\1\114"+
    "\10\0\1\67\42\0\1\114\13\0\1\71\12\0\1\44"+
    "\4\0\1\45\2\0\1\45\1\0\1\45\2\0\1\71"+
    "\2\0\1\45\17\0\1\72\17\0\1\45\2\0\1\45"+
    "\1\0\1\45\2\0\1\72\2\0\1\45\17\0\1\72"+
    "\27\0\1\72\22\0\1\74\12\0\1\115\4\0\1\45"+
    "\1\74\1\0\1\74\1\0\2\74\1\0\2\74\1\0"+
    "\1\45\16\0\2\51\2\0\2\51\1\75\1\116\1\51"+
    "\1\117\3\51\1\120\1\121\1\122\2\51\1\123\2\51"+
    "\1\124\1\125\1\51\1\76\2\51\1\0\1\51\16\0"+
    "\1\126\6\0\21\126\2\0\1\126\1\0\1\126\16\0"+
    "\2\77\2\0\24\77\1\76\2\77\1\0\1\77\16\0"+
    "\2\53\2\0\2\53\1\54\1\53\1\127\17\53\1\55"+
    "\2\53\1\0\1\53\11\0\1\56\4\0\2\53\2\0"+
    "\2\53\1\54\3\53\1\130\14\53\1\131\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\4\0\2\53\2\0\2\53"+
    "\1\54\10\53\1\132\10\53\1\55\2\53\1\0\1\53"+
    "\11\0\1\56\4\0\2\53\2\0\2\53\1\54\14\53"+
    "\1\133\4\53\1\55\2\53\1\0\1\53\11\0\1\56"+
    "\4\0\2\53\2\0\2\53\1\54\11\53\1\134\7\53"+
    "\1\55\2\53\1\0\1\53\11\0\1\56\4\0\2\53"+
    "\2\0\2\53\1\54\4\53\1\135\14\53\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\4\0\2\53\2\0\2\53"+
    "\1\54\6\53\1\136\12\53\1\55\2\53\1\0\1\53"+
    "\11\0\1\56\4\0\2\53\2\0\2\53\1\54\7\53"+
    "\1\137\11\53\1\55\2\53\1\0\1\53\11\0\1\56"+
    "\4\0\2\140\2\0\3\110\21\140\1\0\2\140\1\0"+
    "\1\140\16\0\2\111\2\0\2\111\1\141\21\111\1\0"+
    "\2\111\1\0\1\111\16\0\2\53\2\0\2\53\1\54"+
    "\21\53\1\55\2\53\1\0\1\53\10\0\1\142\1\56"+
    "\4\0\2\53\2\0\2\53\1\54\2\53\1\143\16\53"+
    "\1\55\2\53\1\0\1\53\11\0\1\56\5\0\1\74"+
    "\2\0\1\73\7\0\1\115\4\0\1\45\1\74\1\0"+
    "\1\74\1\0\2\74\1\0\2\74\1\73\1\45\16\0"+
    "\2\51\2\0\2\51\1\75\1\51\1\144\17\51\1\76"+
    "\2\51\1\0\1\51\16\0\2\51\2\0\2\51\1\75"+
    "\3\51\1\145\14\51\1\146\1\76\2\51\1\0\1\51"+
    "\16\0\2\51\2\0\2\51\1\75\10\51\1\147\10\51"+
    "\1\76\2\51\1\0\1\51\16\0\2\51\2\0\2\51"+
    "\1\75\14\51\1\150\4\51\1\76\2\51\1\0\1\51"+
    "\16\0\2\51\2\0\2\51\1\75\11\51\1\151\7\51"+
    "\1\76\2\51\1\0\1\51\16\0\2\51\2\0\2\51"+
    "\1\75\4\51\1\152\14\51\1\76\2\51\1\0\1\51"+
    "\16\0\2\51\2\0\2\51\1\75\6\51\1\153\12\51"+
    "\1\76\2\51\1\0\1\51\16\0\2\51\2\0\2\51"+
    "\1\75\7\51\1\154\11\51\1\76\2\51\1\0\1\51"+
    "\16\0\2\155\2\0\3\126\21\155\1\0\2\155\1\0"+
    "\1\155\16\0\2\53\2\0\2\53\1\54\4\53\1\156"+
    "\14\53\1\55\2\53\1\0\1\53\11\0\1\56\4\0"+
    "\2\53\2\0\2\53\1\54\6\53\1\157\12\53\1\55"+
    "\2\53\1\0\1\53\11\0\1\56\4\0\2\53\2\0"+
    "\2\53\1\54\6\53\1\127\12\53\1\55\2\53\1\0"+
    "\1\53\11\0\1\56\4\0\2\53\2\0\2\53\1\54"+
    "\7\53\1\127\11\53\1\55\2\53\1\0\1\53\11\0"+
    "\1\56\4\0\2\53\2\0\2\53\1\54\12\53\1\127"+
    "\6\53\1\55\2\53\1\0\1\53\11\0\1\56\4\0"+
    "\2\53\2\0\2\53\1\54\14\53\1\160\4\53\1\55"+
    "\2\53\1\0\1\53\11\0\1\56\4\0\2\53\2\0"+
    "\2\53\1\54\11\53\1\161\7\53\1\55\2\53\1\0"+
    "\1\53\11\0\1\56\4\0\2\53\2\0\2\53\1\54"+
    "\15\53\1\160\3\53\1\55\2\53\1\0\1\53\11\0"+
    "\1\56\4\0\2\140\2\0\3\110\21\140\1\55\2\140"+
    "\1\0\1\140\16\0\2\162\2\0\24\162\1\0\2\162"+
    "\1\0\1\162\46\0\1\163\22\0\2\53\2\0\2\53"+
    "\1\54\1\53\1\112\17\53\1\55\2\53\1\0\1\53"+
    "\10\0\1\142\1\56\4\0\2\51\2\0\2\51\1\75"+
    "\21\51\1\76\2\51\1\0\1\51\1\0\1\164\14\0"+
    "\2\51\2\0\2\51\1\75\4\51\1\165\14\51\1\76"+
    "\2\51\1\0\1\51\16\0\2\51\2\0\2\51\1\75"+
    "\6\51\1\166\12\51\1\76\2\51\1\0\1\51\16\0"+
    "\2\51\2\0\2\51\1\75\6\51\1\144\12\51\1\76"+
    "\2\51\1\0\1\51\16\0\2\51\2\0\2\51\1\75"+
    "\7\51\1\144\11\51\1\76\2\51\1\0\1\51\16\0"+
    "\2\51\2\0\2\51\1\75\12\51\1\144\6\51\1\76"+
    "\2\51\1\0\1\51\16\0\2\51\2\0\2\51\1\75"+
    "\14\51\1\167\4\51\1\76\2\51\1\0\1\51\16\0"+
    "\2\51\2\0\2\51\1\75\11\51\1\170\7\51\1\76"+
    "\2\51\1\0\1\51\16\0\2\51\2\0\2\51\1\75"+
    "\15\51\1\167\3\51\1\76\2\51\1\0\1\51\16\0"+
    "\2\155\2\0\3\126\21\155\1\76\2\155\1\0\1\155"+
    "\1\0\1\164\14\0\2\53\2\0\2\53\1\54\2\53"+
    "\1\171\16\53\1\55\2\53\1\0\1\53\11\0\1\56"+
    "\4\0\2\53\2\0\2\53\1\54\13\53\1\172\5\53"+
    "\1\55\2\53\1\0\1\53\11\0\1\56\4\0\2\53"+
    "\2\0\2\53\1\54\15\53\1\127\3\53\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\34\0\1\173\22\0\2\51"+
    "\2\0\2\51\1\75\2\51\1\174\16\51\1\76\2\51"+
    "\1\0\1\51\16\0\2\51\2\0\2\51\1\75\13\51"+
    "\1\175\5\51\1\76\2\51\1\0\1\51\16\0\2\51"+
    "\2\0\2\51\1\75\15\51\1\144\3\51\1\76\2\51"+
    "\1\0\1\51\16\0\2\51\2\0\2\51\1\75\12\51"+
    "\1\144\6\51\1\76\2\51\1\0\1\51\1\0\1\164"+
    "\14\0\2\53\2\0\2\53\1\54\1\53\1\127\3\53"+
    "\1\176\13\53\1\55\2\53\1\0\1\53\11\0\1\56"+
    "\4\0\2\53\2\0\2\53\1\54\16\53\1\127\2\53"+
    "\1\55\2\53\1\0\1\53\11\0\1\56\4\0\35\177"+
    "\4\0\3\177\1\0\2\177\4\0\2\51\2\0\2\51"+
    "\1\75\1\51\1\144\3\51\1\200\13\51\1\76\2\51"+
    "\1\0\1\51\16\0\2\51\2\0\2\51\1\75\16\51"+
    "\1\144\2\51\1\76\2\51\1\0\1\51\16\0\2\53"+
    "\2\0\2\53\1\54\3\53\1\201\15\53\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\4\0\2\202\5\177\24\202"+
    "\1\177\1\202\4\0\3\177\1\0\2\177\4\0\2\51"+
    "\2\0\2\51\1\75\3\51\1\203\15\51\1\76\2\51"+
    "\1\0\1\51\16\0\2\53\2\0\2\53\1\54\6\53"+
    "\1\204\12\53\1\55\2\53\1\0\1\53\11\0\1\56"+
    "\4\0\2\51\2\0\2\51\1\75\6\51\1\205\12\51"+
    "\1\76\2\51\1\0\1\51\16\0\2\53\2\0\2\53"+
    "\1\54\7\53\1\206\11\53\1\55\2\53\1\0\1\53"+
    "\11\0\1\56\4\0\2\51\2\0\2\51\1\75\7\51"+
    "\1\207\11\51\1\76\2\51\1\0\1\51\16\0\2\53"+
    "\2\0\2\53\1\54\5\53\1\100\13\53\1\55\2\53"+
    "\1\0\1\53\11\0\1\56\4\0\2\51\2\0\2\51"+
    "\1\75\5\51\1\116\13\51\1\76\2\51\1\0\1\51"+
    "\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4816];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\2\1\1\11\3\1\4\11"+
    "\5\1\1\11\5\1\1\11\3\1\2\0\1\1\2\11"+
    "\14\0\3\11\1\0\1\11\2\1\1\0\1\1\17\0"+
    "\1\11\1\1\11\0\1\1\10\0\1\1\20\0\2\1"+
    "\1\0\1\11\15\0\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* Must match WhiteSpace regex */
  private final static String WHITE_SPACE = "[ \t\f\r]+";

  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaScriptXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaScriptXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 174) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 26: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 27: break;
        case 9: 
          { yybegin(QSTRING);out.write("<span class=\"s\">\'");
          }
        case 28: break;
        case 18: 
          { out.write("\\\\");
          }
        case 29: break;
        case 8: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 30: break;
        case 11: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 31: break;
        case 20: 
          { out.write("\\\'");
          }
        case 32: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 33: break;
        case 21: 
          { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
          }
        case 34: break;
        case 10: 
          { out.write( "&amp;");
          }
        case 35: break;
        case 13: 
          { yybegin(YYINITIAL); out.write("'</span>");
          }
        case 36: break;
        case 6: 
          { out.write( "&lt;");
          }
        case 37: break;
        case 23: 
          { writeEMailAddress(yytext());
          }
        case 38: break;
        case 24: 
          { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
          }
        case 39: break;
        case 3: 
          { startNewLine();
          }
        case 40: break;
        case 25: 
          { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
          }
        case 41: break;
        case 17: 
          { out.write("\\\"");
          }
        case 42: break;
        case 15: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">//");
          }
        case 43: break;
        case 16: 
          { yybegin(COMMENT);out.write("<span class=\"c\">/*");
          }
        case 44: break;
        case 2: 
          { out.write(yytext());
          }
        case 45: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
          }
        case 46: break;
        case 19: 
          { yybegin(YYINITIAL); out.write("*/</span>");
          }
        case 47: break;
        case 7: 
          { out.write( "&gt;");
          }
        case 48: break;
        case 14: 
          { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
          }
        case 49: break;
        case 22: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
