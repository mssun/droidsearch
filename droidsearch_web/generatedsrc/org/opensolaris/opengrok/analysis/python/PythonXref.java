/* The following code was generated by JFlex 1.4.3 on 11/20/12 3:29 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Python file
 */

package org.opensolaris.opengrok.analysis.python;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/20/12 3:29 PM from the specification file
 * <tt>/home/mssun/Desktop/opengrok-dev/src/org/opensolaris/opengrok/analysis/python/PythonXref.lex</tt>
 */
public class PythonXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int LQSTRING = 10;
  public static final int YYINITIAL = 0;
  public static final int LSTRING = 4;
  public static final int SCOMMENT = 6;
  public static final int QSTRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\40"+
    "\1\42\2\6\1\44\1\41\2\45\1\6\1\34\1\6\1\10\1\11"+
    "\1\30\1\31\11\5\1\47\1\6\1\36\1\6\1\37\1\6\1\50"+
    "\1\27\1\32\1\15\1\26\1\33\1\20\1\4\1\23\1\25\1\35"+
    "\1\4\1\24\1\14\1\17\1\16\1\12\2\4\1\46\1\21\3\4"+
    "\1\22\1\13\1\4\1\45\1\43\2\45\1\7\1\45\1\27\1\32"+
    "\1\15\1\26\1\33\1\20\1\4\1\23\1\25\1\35\1\4\1\24"+
    "\1\14\1\17\1\16\1\12\2\4\1\46\1\21\3\4\1\22\1\13"+
    "\1\4\3\45\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\2\2\14"+
    "\5\4\1\6\1\15\2\4\1\16\2\4\1\17\1\0"+
    "\1\5\1\0\1\5\14\0\1\20\1\21\3\0\1\22"+
    "\1\0\2\5\1\0\1\5\3\0\1\23\1\24\13\0"+
    "\1\2\1\25\1\26\1\5\10\0\1\27\7\0\1\30"+
    "\16\0\1\27\1\31\1\0\1\32\7\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\366\0\u0171\0\u019a\0\366\0\u01c3\0\u01ec\0\366"+
    "\0\u0215\0\u023e\0\366\0\366\0\u0267\0\u0290\0\366\0\u02b9"+
    "\0\u02e2\0\u030b\0\u0334\0\u035d\0\366\0\366\0\u0386\0\u03af"+
    "\0\u03d8\0\u0401\0\u042a\0\u0171\0\u0453\0\u047c\0\u04a5\0\u04ce"+
    "\0\u04f7\0\u0520\0\u0549\0\u0572\0\u02b9\0\u059b\0\u05c4\0\u05ed"+
    "\0\u02e2\0\u0616\0\u063f\0\u0668\0\366\0\366\0\u0691\0\u06ba"+
    "\0\u06e3\0\366\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9"+
    "\0\u0802\0\u082b\0\366\0\366\0\u0854\0\u087d\0\u08a6\0\u08cf"+
    "\0\u08f8\0\u0921\0\u094a\0\u0973\0\u099c\0\u09c5\0\u09ee\0\366"+
    "\0\366\0\366\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb\0\u0ae4"+
    "\0\u0b0d\0\u0b36\0\u0b5f\0\u02b9\0\u0b88\0\u0bb1\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b"+
    "\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93"+
    "\0\u0ebc\0\u0ee5\0\u0c03\0\u0cd0\0\u0f0e\0\366\0\u0f37\0\u0f60"+
    "\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u102d\0\u102d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\2\15\16\13\1\15\1\16\2\13\1\15\1\13\1\17"+
    "\1\20\1\21\1\22\1\23\1\15\1\24\1\15\1\13"+
    "\2\15\1\7\1\25\1\26\1\27\1\30\1\31\1\15"+
    "\3\31\6\30\1\32\2\30\1\33\4\30\1\34\1\31"+
    "\2\30\1\15\1\30\1\35\1\20\1\36\2\15\1\37"+
    "\1\24\1\15\1\30\2\15\1\7\1\10\1\11\1\12"+
    "\1\30\1\31\1\15\3\31\6\30\1\32\2\30\1\33"+
    "\4\30\1\34\1\31\2\30\1\15\1\30\1\35\1\20"+
    "\1\40\2\15\1\37\1\24\1\15\1\30\2\15\1\7"+
    "\1\25\1\26\1\27\1\30\1\31\1\15\3\31\6\30"+
    "\1\32\2\30\1\33\4\30\1\34\1\31\2\30\1\15"+
    "\1\30\1\35\1\20\4\15\1\24\1\15\1\30\2\15"+
    "\1\7\1\25\1\26\1\27\1\30\1\31\1\15\3\31"+
    "\6\30\1\32\2\30\1\33\4\30\1\34\1\31\2\30"+
    "\1\15\1\30\1\35\1\20\1\15\1\41\1\15\1\42"+
    "\1\24\1\15\1\30\2\15\1\7\1\10\1\11\1\12"+
    "\1\30\1\31\1\15\3\31\6\30\1\32\2\30\1\33"+
    "\4\30\1\34\1\31\2\30\1\15\1\30\1\35\1\20"+
    "\1\15\1\43\1\15\1\42\1\24\1\15\1\30\2\15"+
    "\52\0\1\10\1\11\1\12\50\0\1\12\51\0\2\44"+
    "\1\0\1\44\2\0\16\44\1\0\3\44\1\0\1\44"+
    "\10\0\1\44\7\0\1\14\3\0\1\45\4\0\1\46"+
    "\3\0\1\46\1\0\1\46\4\0\1\14\1\46\1\47"+
    "\1\0\1\46\20\0\1\14\3\0\1\45\4\0\1\46"+
    "\3\0\1\50\1\0\1\46\4\0\1\14\1\46\1\47"+
    "\1\0\1\46\17\0\1\51\5\0\16\51\1\52\1\0"+
    "\2\51\1\0\1\51\10\0\1\51\42\0\1\53\51\0"+
    "\1\54\10\0\1\25\1\26\1\27\50\0\1\27\51\0"+
    "\2\55\1\0\2\55\1\56\16\55\1\57\3\55\1\0"+
    "\1\55\10\0\1\55\1\0\1\60\4\0\2\61\1\0"+
    "\21\61\1\0\3\61\1\0\1\61\10\0\1\61\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\7\55\1\62"+
    "\6\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\7\55\1\63"+
    "\6\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\1\64\5\0\16\64\2\0\2\64\1\0"+
    "\1\64\10\0\1\64\42\0\1\65\2\0\1\66\6\0"+
    "\1\67\36\0\1\70\11\0\1\71\110\0\1\72\1\0"+
    "\1\66\6\0\1\71\37\0\1\73\14\0\1\74\23\0"+
    "\1\74\35\0\1\46\3\0\1\46\1\0\1\46\5\0"+
    "\1\46\2\0\1\46\20\0\1\75\2\0\1\76\20\0"+
    "\1\75\2\0\1\76\21\0\1\77\7\0\1\77\1\46"+
    "\1\0\1\77\1\0\1\46\1\0\1\46\1\0\2\77"+
    "\1\0\3\77\1\0\1\46\17\0\2\51\1\0\2\51"+
    "\1\100\16\51\1\101\3\51\1\0\1\51\10\0\1\51"+
    "\6\0\1\102\5\0\16\102\2\0\2\102\1\0\1\102"+
    "\10\0\1\102\42\0\1\103\51\0\1\104\13\0\2\55"+
    "\1\0\2\55\1\56\1\105\2\55\1\106\3\55\1\107"+
    "\1\110\1\111\1\55\1\112\1\113\1\55\1\57\3\55"+
    "\1\0\1\55\10\0\1\55\1\0\1\60\4\0\1\114"+
    "\5\0\16\114\2\0\2\114\1\0\1\114\10\0\1\114"+
    "\6\0\2\115\1\0\21\115\1\0\3\115\1\0\1\115"+
    "\10\0\1\115\6\0\2\55\1\0\2\55\1\56\1\116"+
    "\15\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\7\55\1\117"+
    "\6\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\64\1\0\21\64\1\57\3\64\1\0"+
    "\1\64\10\0\1\64\3\0\1\67\36\0\1\120\50\0"+
    "\1\121\11\0\1\71\37\0\1\120\50\0\1\122\14\0"+
    "\1\74\10\0\1\46\3\0\1\46\1\0\1\46\4\0"+
    "\1\74\1\46\1\47\1\0\1\46\20\0\1\75\10\0"+
    "\1\46\3\0\1\46\1\0\1\46\4\0\1\75\1\46"+
    "\2\0\1\46\20\0\1\75\23\0\1\75\24\0\1\77"+
    "\7\0\1\77\1\46\1\0\1\77\1\0\1\46\1\0"+
    "\1\46\1\0\2\77\1\0\2\77\1\123\1\0\1\46"+
    "\17\0\2\51\1\0\2\51\1\100\1\124\2\51\1\125"+
    "\3\51\1\126\1\127\1\130\1\51\1\131\1\132\1\51"+
    "\1\101\3\51\1\0\1\51\10\0\1\51\6\0\1\133"+
    "\5\0\16\133\2\0\2\133\1\0\1\133\10\0\1\133"+
    "\6\0\2\102\1\0\21\102\1\101\3\102\1\0\1\102"+
    "\10\0\1\102\6\0\2\55\1\0\2\55\1\56\1\55"+
    "\2\134\12\55\1\135\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\4\55\1\136\11\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\10\55\1\137\5\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\2\55\1\140\13\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\7\55\1\141\6\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\5\55\1\142\10\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\13\55\1\143\2\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\144\1\0\3\114\16\144"+
    "\1\0\3\144\1\0\1\144\10\0\1\144\6\0\2\115"+
    "\1\0\2\115\1\145\16\115\1\0\3\115\1\0\1\115"+
    "\10\0\1\115\6\0\2\55\1\0\2\55\1\56\16\55"+
    "\1\57\3\55\1\0\1\55\10\0\1\55\1\146\1\60"+
    "\4\0\2\55\1\0\2\55\1\56\1\147\15\55\1\57"+
    "\3\55\1\0\1\55\10\0\1\55\1\0\1\60\5\0"+
    "\1\77\2\0\1\76\4\0\1\77\1\46\1\0\1\77"+
    "\1\0\1\46\1\0\1\46\1\0\2\77\1\0\2\77"+
    "\1\123\1\76\1\46\17\0\2\51\1\0\2\51\1\100"+
    "\1\51\2\150\12\51\1\151\1\101\3\51\1\0\1\51"+
    "\10\0\1\51\6\0\2\51\1\0\2\51\1\100\4\51"+
    "\1\152\11\51\1\101\3\51\1\0\1\51\10\0\1\51"+
    "\6\0\2\51\1\0\2\51\1\100\10\51\1\153\5\51"+
    "\1\101\3\51\1\0\1\51\10\0\1\51\6\0\2\51"+
    "\1\0\2\51\1\100\2\51\1\154\13\51\1\101\3\51"+
    "\1\0\1\51\10\0\1\51\6\0\2\51\1\0\2\51"+
    "\1\100\7\51\1\155\6\51\1\101\3\51\1\0\1\51"+
    "\10\0\1\51\6\0\2\51\1\0\2\51\1\100\5\51"+
    "\1\156\10\51\1\101\3\51\1\0\1\51\10\0\1\51"+
    "\6\0\2\51\1\0\2\51\1\100\13\51\1\157\2\51"+
    "\1\101\3\51\1\0\1\51\10\0\1\51\6\0\2\160"+
    "\1\0\3\133\16\160\1\0\3\160\1\0\1\160\10\0"+
    "\1\160\6\0\2\55\1\0\2\55\1\56\7\55\1\161"+
    "\6\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\5\55\1\162"+
    "\10\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\7\55\1\134"+
    "\6\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\12\55\1\134"+
    "\3\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\2\55\1\163"+
    "\13\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\13\55\1\134"+
    "\2\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\55\1\0\2\55\1\56\6\55\1\162"+
    "\7\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\2\144\1\0\3\114\16\144\1\57\3\144"+
    "\1\0\1\144\10\0\1\144\6\0\2\164\1\0\21\164"+
    "\1\0\3\164\1\0\1\164\10\0\1\164\32\0\1\165"+
    "\24\0\2\55\1\0\2\55\1\56\16\55\1\57\3\55"+
    "\1\0\1\55\10\0\1\116\1\146\1\60\4\0\2\51"+
    "\1\0\2\51\1\100\16\51\1\101\3\51\1\0\1\51"+
    "\1\0\1\166\6\0\1\51\6\0\2\51\1\0\2\51"+
    "\1\100\7\51\1\167\6\51\1\101\3\51\1\0\1\51"+
    "\10\0\1\51\6\0\2\51\1\0\2\51\1\100\5\51"+
    "\1\170\10\51\1\101\3\51\1\0\1\51\10\0\1\51"+
    "\6\0\2\51\1\0\2\51\1\100\7\51\1\150\6\51"+
    "\1\101\3\51\1\0\1\51\10\0\1\51\6\0\2\51"+
    "\1\0\2\51\1\100\12\51\1\150\3\51\1\101\3\51"+
    "\1\0\1\51\10\0\1\51\6\0\2\51\1\0\2\51"+
    "\1\100\2\51\1\171\13\51\1\101\3\51\1\0\1\51"+
    "\10\0\1\51\6\0\2\51\1\0\2\51\1\100\13\51"+
    "\1\150\2\51\1\101\3\51\1\0\1\51\10\0\1\51"+
    "\6\0\2\51\1\0\2\51\1\100\6\51\1\170\7\51"+
    "\1\101\3\51\1\0\1\51\10\0\1\51\6\0\2\160"+
    "\1\0\3\133\16\160\1\101\3\160\1\0\1\160\1\0"+
    "\1\166\6\0\1\160\6\0\2\55\1\0\2\55\1\56"+
    "\3\55\1\172\12\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\4\0\2\55\1\0\2\55\1\56"+
    "\6\55\1\134\7\55\1\57\3\55\1\0\1\55\10\0"+
    "\1\55\1\0\1\60\30\0\1\173\24\0\2\51\1\0"+
    "\2\51\1\100\3\51\1\174\12\51\1\101\3\51\1\0"+
    "\1\51\10\0\1\51\6\0\2\51\1\0\2\51\1\100"+
    "\6\51\1\150\7\51\1\101\3\51\1\0\1\51\10\0"+
    "\1\51\6\0\2\51\1\0\2\51\1\100\12\51\1\150"+
    "\3\51\1\101\3\51\1\0\1\51\1\0\1\166\6\0"+
    "\1\51\6\0\2\55\1\0\2\55\1\56\11\55\1\134"+
    "\4\55\1\57\3\55\1\0\1\55\10\0\1\55\1\0"+
    "\1\60\4\0\32\175\5\0\2\175\1\0\3\175\4\0"+
    "\2\51\1\0\2\51\1\100\11\51\1\150\4\51\1\101"+
    "\3\51\1\0\1\51\10\0\1\51\6\0\2\176\4\175"+
    "\22\176\1\175\1\176\5\0\2\175\1\0\1\176\2\175";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4182];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\2\11\2\1\1\11\5\1\2\11\6\1\1\0"+
    "\1\1\1\0\1\1\14\0\2\11\3\0\1\11\1\0"+
    "\2\1\1\0\1\1\3\0\2\11\13\0\3\11\1\1"+
    "\10\0\1\1\7\0\1\1\16\0\2\1\1\0\1\11"+
    "\7\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[126];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PythonXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { yybegin(LQSTRING);out.write("<span class=\"s\">\'\'\'");
          }
        case 28: break;
        case 5: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 29: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 30: break;
        case 9: 
          { yybegin(QSTRING);out.write("<span class=\"s\">\'");
          }
        case 31: break;
        case 10: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">#");
          }
        case 32: break;
        case 17: 
          { out.write("\\\\");
          }
        case 33: break;
        case 21: 
          { yybegin(YYINITIAL); out.write("\"\"\"</span>");
          }
        case 34: break;
        case 8: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 35: break;
        case 13: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 36: break;
        case 18: 
          { out.write("\\\'");
          }
        case 37: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 38: break;
        case 23: 
          { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
          }
        case 39: break;
        case 11: 
          { out.write( "&amp;");
          }
        case 40: break;
        case 14: 
          { yybegin(YYINITIAL); out.write("'</span>");
          }
        case 41: break;
        case 6: 
          { out.write( "&lt;");
          }
        case 42: break;
        case 25: 
          { writeEMailAddress(yytext());
          }
        case 43: break;
        case 26: 
          { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
          }
        case 44: break;
        case 3: 
          { startNewLine();
          }
        case 45: break;
        case 27: 
          { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
          }
        case 46: break;
        case 16: 
          { out.write("\\\"");
          }
        case 47: break;
        case 2: 
          { out.write(yytext());
          }
        case 48: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
          }
        case 49: break;
        case 7: 
          { out.write( "&gt;");
          }
        case 50: break;
        case 15: 
          { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
          }
        case 51: break;
        case 24: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 52: break;
        case 22: 
          { yybegin(YYINITIAL); out.write("'''</span>");
          }
        case 53: break;
        case 19: 
          { yybegin(LSTRING);out.write("<span class=\"s\">\"\"\"");
          }
        case 54: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
