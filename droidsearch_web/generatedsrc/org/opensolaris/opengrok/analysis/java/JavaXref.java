/* The following code was generated by JFlex 1.4.3 on 11/20/12 2:50 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2006, 2010, Oracle and/or its affiliates. All rights reserved.
 */

/*
 * Cross reference a Java file
 */

package org.opensolaris.opengrok.analysis.java;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/20/12 2:50 PM from the specification file
 * <tt>/home/mssun/Desktop/opengrok-dev/src/org/opensolaris/opengrok/analysis/java/JavaXref.lex</tt>
 */
public class JavaXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;
  public static final int SCOMMENT = 6;
  public static final int JAVADOC = 10;
  public static final int QSTRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\2\22\0\1\1\1\6\1\45"+
    "\1\50\2\6\1\52\1\46\2\53\1\47\1\37\1\6\1\10\1\11"+
    "\1\34\1\35\11\5\1\54\1\6\1\43\1\6\1\44\1\6\1\41"+
    "\1\13\1\36\1\27\1\33\1\20\1\31\1\4\1\32\1\22\1\12"+
    "\1\4\1\26\1\25\1\30\1\17\1\15\1\4\1\16\1\23\1\21"+
    "\1\40\1\14\1\42\1\24\2\4\1\53\1\51\2\53\1\7\1\53"+
    "\1\13\1\36\1\27\1\33\1\20\1\31\1\4\1\32\1\22\1\12"+
    "\1\4\1\26\1\25\1\30\1\17\1\15\1\4\1\16\1\23\1\21"+
    "\1\40\1\14\1\42\1\24\2\4\3\53\1\6\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\2\3\1\4\1\5\2\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\5\4\1\6"+
    "\1\14\2\4\1\2\2\15\1\16\2\4\1\17\2\0"+
    "\1\5\1\20\1\21\14\0\1\22\1\23\1\24\1\0"+
    "\1\25\4\0\2\5\2\0\1\5\17\0\1\2\4\26"+
    "\1\27\1\5\23\0\1\30\3\0\3\26\14\0\1\31"+
    "\4\0\1\31\1\32\1\0\3\26\7\0\1\33\3\0"+
    "\3\26\5\0\2\26\2\0\1\34\2\0\1\26\3\0"+
    "\1\35\1\0\1\26\4\0\1\35\2\0\1\35\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u0168\0\u010e\0\u0195\0\u01c2\0\u010e\0\u01ef\0\u021c\0\u0249"+
    "\0\u010e\0\u010e\0\u010e\0\u010e\0\u010e\0\u0276\0\u02a3\0\u02d0"+
    "\0\u02fd\0\u032a\0\u010e\0\u0357\0\u0384\0\u03b1\0\u03de\0\u040b"+
    "\0\u010e\0\u0438\0\u0465\0\u0492\0\u0195\0\u04bf\0\u04ec\0\u0519"+
    "\0\u010e\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u0276\0\u05fa\0\u0627"+
    "\0\u0654\0\u02a3\0\u0681\0\u06ae\0\u06db\0\u0708\0\u010e\0\u010e"+
    "\0\u010e\0\u0735\0\u010e\0\u0762\0\u078f\0\u07bc\0\u07e9\0\u0816"+
    "\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"+
    "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\u0b40\0\u0b6d\0\u010e\0\u0762\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u010e\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5\0\u0d02\0\u0d2f"+
    "\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97"+
    "\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff"+
    "\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167"+
    "\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2\0\u12cf"+
    "\0\u0276\0\u12fc\0\u1329\0\u1356\0\u1383\0\u0ef1\0\u0fd2\0\u13b0"+
    "\0\u13dd\0\u140a\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb\0\u1518"+
    "\0\u1545\0\u1572\0\u010e\0\u159f\0\u15cc\0\u15f9\0\u1626\0\u1653"+
    "\0\u1680\0\u16ad\0\u16da\0\u1707\0\u1734\0\u1761\0\u178e\0\u17bb"+
    "\0\u17e8\0\u1815\0\u1734\0\u1842\0\u186f\0\u189c\0\u18c9\0\u18f6"+
    "\0\u1923\0\u1842\0\u1950\0\u197d\0\u19aa\0\u19d7\0\u1a04\0\u1a31"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\u010e\0\u1ae5\0\u1b12";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\13"+
    "\2\15\22\13\1\16\1\17\1\13\1\15\1\13\1\15"+
    "\1\13\1\20\1\21\1\22\1\23\1\15\1\24\1\15"+
    "\1\25\2\15\1\7\1\10\1\11\1\12\1\26\1\27"+
    "\1\15\3\27\17\26\1\30\1\31\1\26\1\32\1\27"+
    "\1\26\1\15\1\26\1\15\1\26\1\33\1\21\1\34"+
    "\3\15\1\35\1\25\2\15\1\7\1\10\1\11\1\12"+
    "\1\26\1\27\1\15\3\27\17\26\1\30\1\31\1\26"+
    "\1\32\1\27\1\26\1\15\1\26\1\15\1\26\1\33"+
    "\1\21\2\15\1\36\2\15\1\25\2\15\1\7\1\37"+
    "\1\40\1\41\1\26\1\27\1\15\3\27\17\26\1\30"+
    "\1\31\1\26\1\32\1\27\1\26\1\15\1\26\1\15"+
    "\1\26\1\33\1\21\5\15\1\25\2\15\1\7\1\10"+
    "\1\11\1\12\1\26\1\27\1\15\3\27\17\26\1\30"+
    "\1\31\1\26\1\32\1\27\1\26\1\15\1\26\1\15"+
    "\1\26\1\33\1\21\1\15\1\42\2\15\1\43\1\25"+
    "\2\15\1\7\1\10\1\11\1\12\1\26\1\27\1\15"+
    "\3\27\17\26\1\30\1\31\1\26\1\32\1\27\1\26"+
    "\1\15\1\26\1\44\1\26\1\33\1\21\2\15\1\36"+
    "\2\15\1\25\2\15\56\0\1\10\1\11\1\12\54\0"+
    "\1\12\55\0\2\45\1\0\1\45\2\0\22\45\1\0"+
    "\2\45\1\0\1\45\1\0\1\45\17\0\1\14\3\0"+
    "\1\46\6\0\1\47\5\0\1\50\2\0\1\50\1\0"+
    "\1\50\1\0\1\14\2\0\1\50\50\0\1\51\12\0"+
    "\1\52\12\0\1\14\3\0\1\46\6\0\1\47\3\0"+
    "\1\53\1\0\1\50\2\0\1\50\1\0\1\50\1\0"+
    "\1\14\2\0\1\50\20\0\1\54\5\0\22\54\1\55"+
    "\1\0\1\54\1\0\1\54\1\0\1\54\16\0\2\56"+
    "\1\0\2\56\1\57\22\56\1\60\2\56\1\0\1\56"+
    "\1\61\1\56\16\0\2\62\1\0\25\62\1\0\2\62"+
    "\1\0\1\62\1\61\1\62\16\0\2\56\1\0\2\56"+
    "\1\57\7\56\1\63\12\56\1\60\2\56\1\0\1\56"+
    "\1\61\1\56\16\0\2\56\1\0\2\56\1\57\7\56"+
    "\1\64\12\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\1\65\5\0\22\65\2\0\1\65\1\0\1\65"+
    "\1\0\1\65\13\0\1\66\120\0\1\67\3\0\1\70"+
    "\37\0\1\71\21\0\1\37\1\40\1\41\54\0\1\41"+
    "\52\0\1\72\121\0\1\73\2\0\1\70\7\0\1\74"+
    "\2\0\1\74\2\0\3\74\1\75\2\74\1\76\1\77"+
    "\12\74\2\0\1\74\1\0\1\74\1\0\1\74\17\0"+
    "\1\100\27\0\1\100\24\0\1\101\2\0\1\102\24\0"+
    "\1\101\1\0\1\102\43\0\1\50\2\0\1\50\1\0"+
    "\1\50\4\0\1\50\63\0\1\103\12\0\1\104\5\0"+
    "\1\104\4\0\1\104\6\0\1\104\1\0\1\104\1\0"+
    "\1\104\1\0\2\104\22\0\2\54\1\0\2\54\1\105"+
    "\22\54\1\106\2\54\1\0\1\54\1\0\1\54\16\0"+
    "\1\107\5\0\22\107\2\0\1\107\1\0\1\107\1\0"+
    "\1\107\16\0\2\56\1\0\2\56\1\57\1\110\2\56"+
    "\1\111\3\56\1\112\1\113\1\56\1\114\2\56\1\115"+
    "\2\56\1\116\1\117\1\60\2\56\1\0\1\56\1\61"+
    "\1\56\16\0\1\120\5\0\22\120\2\0\1\120\1\0"+
    "\1\120\1\0\1\120\16\0\2\121\1\0\25\121\1\0"+
    "\2\121\1\0\1\121\1\0\1\121\16\0\2\56\1\0"+
    "\2\56\1\57\3\56\1\122\16\56\1\60\2\56\1\0"+
    "\1\56\1\61\1\56\16\0\2\56\1\0\2\56\1\57"+
    "\7\56\1\123\12\56\1\60\2\56\1\0\1\56\1\61"+
    "\1\56\16\0\2\65\1\0\25\65\1\60\2\65\1\0"+
    "\1\65\1\0\1\65\13\0\1\66\43\0\1\124\10\0"+
    "\1\72\44\0\1\124\12\0\2\125\1\0\1\125\2\0"+
    "\22\125\1\0\2\125\1\0\1\125\1\0\1\125\16\0"+
    "\2\125\1\0\1\125\2\0\1\125\1\126\20\125\1\0"+
    "\2\125\1\0\1\125\1\0\1\125\16\0\2\125\1\0"+
    "\1\125\2\0\12\125\1\127\7\125\1\0\2\125\1\0"+
    "\1\125\1\0\1\125\16\0\2\125\1\0\1\125\2\0"+
    "\20\125\1\130\1\125\1\0\2\125\1\0\1\125\1\0"+
    "\1\125\17\0\1\100\12\0\1\47\5\0\1\50\2\0"+
    "\1\50\1\0\1\50\1\0\1\100\2\0\1\50\21\0"+
    "\1\101\20\0\1\50\2\0\1\50\1\0\1\50\1\0"+
    "\1\101\2\0\1\50\21\0\1\101\27\0\1\101\17\0"+
    "\34\131\1\0\20\131\5\0\1\104\5\0\1\104\4\0"+
    "\1\132\5\0\1\50\1\104\1\0\1\104\1\0\1\104"+
    "\1\0\2\104\1\0\1\50\20\0\2\54\1\0\2\54"+
    "\1\105\1\133\2\54\1\134\3\54\1\135\1\136\1\54"+
    "\1\137\2\54\1\140\2\54\1\141\1\142\1\106\2\54"+
    "\1\0\1\54\1\0\1\54\16\0\1\143\5\0\22\143"+
    "\2\0\1\143\1\0\1\143\1\0\1\143\16\0\2\107"+
    "\1\0\25\107\1\106\2\107\1\0\1\107\1\0\1\107"+
    "\16\0\2\56\1\0\2\56\1\57\1\56\1\144\14\56"+
    "\1\145\3\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\56\1\0\2\56\1\57\1\56\1\146\2\56"+
    "\1\147\15\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\56\1\0\2\56\1\57\12\56\1\150\7\56"+
    "\1\60\2\56\1\0\1\56\1\61\1\56\16\0\2\56"+
    "\1\0\2\56\1\57\16\56\1\151\3\56\1\60\2\56"+
    "\1\0\1\56\1\61\1\56\16\0\2\56\1\0\2\56"+
    "\1\57\13\56\1\152\6\56\1\60\2\56\1\0\1\56"+
    "\1\61\1\56\16\0\2\56\1\0\2\56\1\57\5\56"+
    "\1\153\14\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\56\1\0\2\56\1\57\7\56\1\154\12\56"+
    "\1\60\2\56\1\0\1\56\1\61\1\56\16\0\2\56"+
    "\1\0\2\56\1\57\10\56\1\155\11\56\1\60\2\56"+
    "\1\0\1\56\1\61\1\56\16\0\2\156\1\0\3\120"+
    "\22\156\1\0\2\156\1\0\1\156\1\0\1\156\16\0"+
    "\2\121\1\0\2\121\1\157\22\121\1\0\2\121\1\0"+
    "\1\121\1\0\1\121\16\0\2\56\1\0\2\56\1\57"+
    "\22\56\1\60\2\56\1\0\1\56\1\61\1\56\11\0"+
    "\1\160\4\0\2\56\1\0\2\56\1\57\3\56\1\161"+
    "\16\56\1\60\2\56\1\0\1\56\1\61\1\56\16\0"+
    "\2\125\1\0\1\125\2\0\4\125\1\162\15\125\1\0"+
    "\2\125\1\0\1\125\1\0\1\125\16\0\2\125\1\0"+
    "\1\125\2\0\15\125\1\163\4\125\1\0\2\125\1\0"+
    "\1\125\1\0\1\125\16\0\2\125\1\0\1\125\2\0"+
    "\4\125\1\164\15\125\1\0\2\125\1\0\1\125\1\0"+
    "\1\125\17\0\1\104\2\0\1\102\2\0\1\104\4\0"+
    "\1\132\5\0\1\50\1\104\1\0\1\104\1\0\1\104"+
    "\1\0\2\104\1\102\1\50\20\0\2\54\1\0\2\54"+
    "\1\105\1\54\1\165\14\54\1\166\3\54\1\106\2\54"+
    "\1\0\1\54\1\0\1\54\16\0\2\54\1\0\2\54"+
    "\1\105\1\54\1\167\2\54\1\170\15\54\1\106\2\54"+
    "\1\0\1\54\1\0\1\54\16\0\2\54\1\0\2\54"+
    "\1\105\12\54\1\171\7\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\16\0\2\54\1\0\2\54\1\105\16\54"+
    "\1\172\3\54\1\106\2\54\1\0\1\54\1\0\1\54"+
    "\16\0\2\54\1\0\2\54\1\105\13\54\1\173\6\54"+
    "\1\106\2\54\1\0\1\54\1\0\1\54\16\0\2\54"+
    "\1\0\2\54\1\105\5\54\1\174\14\54\1\106\2\54"+
    "\1\0\1\54\1\0\1\54\16\0\2\54\1\0\2\54"+
    "\1\105\7\54\1\175\12\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\16\0\2\54\1\0\2\54\1\105\10\54"+
    "\1\176\11\54\1\106\2\54\1\0\1\54\1\0\1\54"+
    "\16\0\2\177\1\0\3\143\22\177\1\0\2\177\1\0"+
    "\1\177\1\0\1\177\16\0\2\56\1\0\2\56\1\57"+
    "\2\56\1\200\16\56\1\201\1\60\2\56\1\0\1\56"+
    "\1\61\1\56\16\0\2\56\1\0\2\56\1\57\14\56"+
    "\1\202\5\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\56\1\0\2\56\1\57\7\56\1\203\12\56"+
    "\1\60\2\56\1\0\1\56\1\61\1\56\16\0\2\56"+
    "\1\0\2\56\1\57\5\56\1\204\14\56\1\60\2\56"+
    "\1\0\1\56\1\61\1\56\16\0\2\56\1\0\2\56"+
    "\1\57\7\56\1\201\12\56\1\60\2\56\1\0\1\56"+
    "\1\61\1\56\16\0\2\56\1\0\2\56\1\57\10\56"+
    "\1\201\11\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\56\1\0\2\56\1\57\14\56\1\201\5\56"+
    "\1\60\2\56\1\0\1\56\1\61\1\56\16\0\2\56"+
    "\1\0\2\56\1\57\16\56\1\205\3\56\1\60\2\56"+
    "\1\0\1\56\1\61\1\56\16\0\2\56\1\0\2\56"+
    "\1\57\13\56\1\206\6\56\1\60\2\56\1\0\1\56"+
    "\1\61\1\56\16\0\2\56\1\0\2\56\1\57\17\56"+
    "\1\205\2\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\156\1\0\3\120\22\156\1\60\2\156\1\0"+
    "\1\156\1\0\1\156\16\0\2\207\1\0\25\207\1\0"+
    "\2\207\1\0\1\207\1\0\1\207\46\0\1\210\24\0"+
    "\2\56\1\0\2\56\1\57\11\56\1\122\10\56\1\60"+
    "\2\56\1\0\1\56\1\61\1\56\11\0\1\160\4\0"+
    "\2\125\1\0\1\125\2\0\1\125\1\211\20\125\1\0"+
    "\2\125\1\0\1\125\1\0\1\125\16\0\2\125\1\0"+
    "\1\125\2\0\6\125\1\212\13\125\1\0\2\125\1\0"+
    "\1\125\1\0\1\125\16\0\2\125\1\0\1\125\2\0"+
    "\5\125\1\213\14\125\1\0\2\125\1\0\1\125\1\0"+
    "\1\125\16\0\2\54\1\0\2\54\1\105\2\54\1\214"+
    "\16\54\1\215\1\106\2\54\1\0\1\54\1\0\1\54"+
    "\16\0\2\54\1\0\2\54\1\105\14\54\1\216\5\54"+
    "\1\106\2\54\1\0\1\54\1\0\1\54\16\0\2\54"+
    "\1\0\2\54\1\105\7\54\1\217\12\54\1\106\2\54"+
    "\1\0\1\54\1\0\1\54\16\0\2\54\1\0\2\54"+
    "\1\105\5\54\1\220\14\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\16\0\2\54\1\0\2\54\1\105\7\54"+
    "\1\215\12\54\1\106\2\54\1\0\1\54\1\0\1\54"+
    "\16\0\2\54\1\0\2\54\1\105\10\54\1\215\11\54"+
    "\1\106\2\54\1\0\1\54\1\0\1\54\16\0\2\54"+
    "\1\0\2\54\1\105\14\54\1\215\5\54\1\106\2\54"+
    "\1\0\1\54\1\0\1\54\16\0\2\54\1\0\2\54"+
    "\1\105\16\54\1\221\3\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\16\0\2\54\1\0\2\54\1\105\13\54"+
    "\1\222\6\54\1\106\2\54\1\0\1\54\1\0\1\54"+
    "\16\0\2\54\1\0\2\54\1\105\17\54\1\221\2\54"+
    "\1\106\2\54\1\0\1\54\1\0\1\54\16\0\2\177"+
    "\1\0\3\143\22\177\1\106\2\177\1\0\1\177\1\0"+
    "\1\177\1\0\1\223\14\0\2\56\1\0\2\56\1\57"+
    "\1\56\1\201\20\56\1\60\2\56\1\0\1\56\1\61"+
    "\1\56\16\0\2\56\1\0\2\56\1\57\3\56\1\201"+
    "\16\56\1\60\2\56\1\0\1\56\1\61\1\56\16\0"+
    "\2\56\1\0\2\56\1\57\15\56\1\224\4\56\1\60"+
    "\2\56\1\0\1\56\1\61\1\56\16\0\2\56\1\0"+
    "\2\56\1\57\3\56\1\225\16\56\1\60\2\56\1\0"+
    "\1\56\1\61\1\56\16\0\2\56\1\0\2\56\1\57"+
    "\17\56\1\201\2\56\1\60\2\56\1\0\1\56\1\61"+
    "\1\56\46\0\1\226\24\0\2\125\1\0\1\125\2\0"+
    "\13\125\1\227\6\125\1\0\2\125\1\0\1\125\1\0"+
    "\1\125\16\0\2\125\1\0\1\125\2\0\3\125\1\230"+
    "\16\125\1\0\2\125\1\0\1\125\1\0\1\125\16\0"+
    "\2\125\1\0\1\125\2\0\22\125\1\0\2\125\1\0"+
    "\1\125\1\0\1\231\16\0\2\54\1\0\2\54\1\105"+
    "\1\54\1\215\20\54\1\106\2\54\1\0\1\54\1\0"+
    "\1\54\16\0\2\54\1\0\2\54\1\105\22\54\1\106"+
    "\2\54\1\0\1\54\1\0\1\54\1\0\1\223\14\0"+
    "\2\54\1\0\2\54\1\105\3\54\1\215\16\54\1\106"+
    "\2\54\1\0\1\54\1\0\1\54\16\0\2\54\1\0"+
    "\2\54\1\105\15\54\1\232\4\54\1\106\2\54\1\0"+
    "\1\54\1\0\1\54\16\0\2\54\1\0\2\54\1\105"+
    "\3\54\1\233\16\54\1\106\2\54\1\0\1\54\1\0"+
    "\1\54\16\0\2\54\1\0\2\54\1\105\17\54\1\215"+
    "\2\54\1\106\2\54\1\0\1\54\1\0\1\54\16\0"+
    "\2\54\1\0\2\54\1\105\14\54\1\215\5\54\1\106"+
    "\2\54\1\0\1\54\1\0\1\54\1\0\1\223\14\0"+
    "\2\56\1\0\2\56\1\57\20\56\1\201\1\56\1\60"+
    "\2\56\1\0\1\56\1\61\1\56\16\0\2\56\1\0"+
    "\2\56\1\57\6\56\1\234\2\56\1\201\10\56\1\60"+
    "\2\56\1\0\1\56\1\61\1\56\16\0\37\235\4\0"+
    "\1\235\1\0\2\235\1\0\1\235\1\0\1\236\2\0"+
    "\2\125\1\0\1\125\2\0\22\125\1\0\2\125\1\0"+
    "\1\125\1\0\1\125\16\0\2\125\1\0\1\125\2\0"+
    "\7\125\1\237\12\125\1\0\2\125\1\0\1\125\1\0"+
    "\1\125\16\0\2\125\1\0\1\125\2\0\11\125\1\240"+
    "\10\125\1\0\2\125\1\0\1\125\1\0\1\125\16\0"+
    "\2\54\1\0\2\54\1\105\20\54\1\215\1\54\1\106"+
    "\2\54\1\0\1\54\1\0\1\54\16\0\2\54\1\0"+
    "\2\54\1\105\6\54\1\241\2\54\1\215\10\54\1\106"+
    "\2\54\1\0\1\54\1\0\1\54\16\0\2\56\1\0"+
    "\2\56\1\57\4\56\1\242\15\56\1\60\2\56\1\0"+
    "\1\56\1\61\1\56\16\0\2\243\4\235\25\243\1\235"+
    "\1\243\1\235\1\243\4\0\1\235\1\0\2\235\1\0"+
    "\1\235\1\0\1\236\2\0\1\244\2\0\1\244\2\0"+
    "\22\244\2\0\1\244\1\0\1\244\1\0\1\244\1\245"+
    "\15\0\2\125\1\0\1\125\2\0\10\125\1\246\11\125"+
    "\1\0\2\125\1\0\1\125\1\0\1\125\13\0\1\247"+
    "\2\0\2\125\1\0\1\125\2\0\22\125\1\0\2\125"+
    "\1\0\1\125\1\0\1\125\16\0\2\54\1\0\2\54"+
    "\1\105\4\54\1\250\15\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\16\0\2\56\1\0\2\56\1\57\7\56"+
    "\1\251\12\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\252\1\0\1\252\2\0\22\252\1\0\2\252"+
    "\1\0\1\252\1\0\1\252\16\0\1\253\2\0\1\253"+
    "\2\0\22\253\2\0\1\253\1\0\1\253\1\0\1\253"+
    "\16\0\2\125\1\0\1\125\2\0\5\125\1\254\14\125"+
    "\1\0\2\125\1\0\1\125\1\0\1\125\13\0\1\247"+
    "\2\0\1\255\2\0\1\255\2\0\22\255\2\0\1\255"+
    "\1\0\1\255\1\0\1\255\16\0\2\54\1\0\2\54"+
    "\1\105\7\54\1\256\12\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\16\0\2\56\1\0\2\56\1\57\10\56"+
    "\1\257\11\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\2\260\1\0\1\260\2\0\22\260\1\0\2\260"+
    "\1\0\1\260\1\0\1\260\16\0\2\125\1\0\1\125"+
    "\2\0\16\125\1\240\3\125\1\0\2\125\1\0\1\125"+
    "\1\0\1\125\16\0\2\261\1\0\1\261\2\0\22\261"+
    "\1\0\2\261\1\0\1\261\1\0\1\261\16\0\2\54"+
    "\1\0\2\54\1\105\10\54\1\262\11\54\1\106\2\54"+
    "\1\0\1\54\1\0\1\54\16\0\2\56\1\0\2\56"+
    "\1\57\6\56\1\263\13\56\1\60\2\56\1\0\1\56"+
    "\1\61\1\56\16\0\2\260\1\0\1\260\2\0\22\260"+
    "\1\0\2\260\1\0\1\260\1\0\1\260\1\0\1\264"+
    "\14\0\2\261\1\0\1\261\2\0\22\261\1\265\2\261"+
    "\1\0\1\261\1\0\1\261\16\0\2\54\1\0\2\54"+
    "\1\105\6\54\1\266\13\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\16\0\2\56\1\0\2\56\1\57\11\56"+
    "\1\201\10\56\1\60\2\56\1\0\1\56\1\61\1\56"+
    "\16\0\1\255\2\0\1\255\2\0\22\255\2\0\1\255"+
    "\1\0\1\255\1\0\1\255\16\0\2\54\1\0\2\54"+
    "\1\105\11\54\1\215\10\54\1\106\2\54\1\0\1\54"+
    "\1\0\1\54\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6975];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\2\1\1\11\2\1\1\11\3\1\5\11"+
    "\5\1\1\11\5\1\1\11\4\1\2\0\1\1\1\11"+
    "\1\1\14\0\3\11\1\0\1\11\4\0\2\1\2\0"+
    "\1\1\17\0\1\11\4\1\1\11\1\1\23\0\1\1"+
    "\3\0\3\1\14\0\1\1\4\0\2\1\1\0\3\1"+
    "\7\0\1\11\3\0\3\1\5\0\2\1\2\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\4\0\1\1"+
    "\2\0\1\11\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[182];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  /* Must match WhiteSpace regex */
  private final static String WHITE_SPACE = "[ \t\f\r]+";

  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public JavaXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { out.write("<span class=\"n\">"); out.write(yytext()); out.write("</span>");
          }
        case 30: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 31: break;
        case 9: 
          { yybegin(QSTRING);out.write("<span class=\"s\">\'");
          }
        case 32: break;
        case 22: 
          { out.append("<strong>").append(yytext()).append("</strong>");
          }
        case 33: break;
        case 10: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">#");
          }
        case 34: break;
        case 19: 
          { out.write("\\\\");
          }
        case 35: break;
        case 8: 
          { yybegin(STRING);out.write("<span class=\"s\">\"");
          }
        case 36: break;
        case 12: 
          { yybegin(YYINITIAL); out.write("\"</span>");
          }
        case 37: break;
        case 21: 
          { out.write("\\\'");
          }
        case 38: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 39: break;
        case 25: 
          { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
          }
        case 40: break;
        case 11: 
          { out.write( "&amp;");
          }
        case 41: break;
        case 14: 
          { yybegin(YYINITIAL); out.write("'</span>");
          }
        case 42: break;
        case 6: 
          { out.write( "&lt;");
          }
        case 43: break;
        case 26: 
          { writeEMailAddress(yytext());
          }
        case 44: break;
        case 27: 
          { out.write("&lt;");
        String path = yytext();
        path = path.substring(1, path.length() - 1);
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
        out.write("&gt;");
          }
        case 45: break;
        case 3: 
          { startNewLine();
          }
        case 46: break;
        case 28: 
          { String url = yytext();
         out.write("<a href=\"");
         out.write(url);out.write("\">");
         out.write(url);out.write("</a>");
          }
        case 47: break;
        case 18: 
          { out.write("\\\"");
          }
        case 48: break;
        case 16: 
          { yybegin(SCOMMENT);out.write("<span class=\"c\">//");
          }
        case 49: break;
        case 23: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { yybegin(JAVADOC);out.write("<span class=\"c\">/**");
          }
        case 50: break;
        case 17: 
          { yybegin(COMMENT);out.write("<span class=\"c\">/*");
          }
        case 51: break;
        case 2: 
          { out.write(yytext());
          }
        case 52: break;
        case 13: 
          { yybegin(YYINITIAL); out.write("</span>");
    startNewLine();
          }
        case 53: break;
        case 20: 
          { yybegin(YYINITIAL); out.write("*/</span>");
          }
        case 54: break;
        case 7: 
          { out.write( "&gt;");
          }
        case 55: break;
        case 15: 
          { String id = yytext();
    writeSymbol(id, Consts.kwd, yyline);
          }
        case 56: break;
        case 24: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 57: break;
        case 29: 
          { String text = yytext();
    String[] tokens = text.split(WHITE_SPACE, 2);
    out.append("<strong>").append(tokens[0]).append("</strong>")
      .append(text.substring(tokens[0].length(),
                             text.length() - tokens[1].length()))
      .append("<em>").append(tokens[1]).append("</em>");
          }
        case 58: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
