/* The following code was generated by JFlex 1.4.3 on 10/25/12 4:28 PM */

/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "License").  
 * You may not use this file except in compliance with the License.
 *
 * See LICENSE.txt included in this distribution for the specific
 * language governing permissions and limitations under the License.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the License file at LICENSE.txt.
 * If applicable, add the following below this CDDL HEADER, with the
 * fields enclosed by brackets "[]" replaced with your own identifying
 * information: Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */

/*
 * Copyright (c) 2005, 2010, Oracle and/or its affiliates. All rights reserved.
 *
 * Portions Copyright 2011 Jens Elkner.
 */

package org.opensolaris.opengrok.analysis.document;
import org.opensolaris.opengrok.analysis.JFlexXref;
import java.io.IOException;
import java.io.Writer;
import java.io.Reader;
import org.opensolaris.opengrok.web.Util;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/25/12 4:28 PM from the specification file
 * <tt>/home/mssun/Desktop/opengrok-dev/src/org/opensolaris/opengrok/analysis/document/TroffXref.lex</tt>
 */
public class TroffXref extends JFlexXref {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int TBL = 8;
  public static final int COMMENT = 4;
  public static final int HEADER = 2;
  public static final int BOLD = 6;
  public static final int TBLL = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\7\0\1\73\1\0\1\1\1\3\1\71\1\72\1\2\22\0\1\101"+
    "\1\104\1\41\3\104\1\100\1\42\1\53\1\70\1\66\2\104\1\4"+
    "\1\5\1\25\12\27\2\104\1\102\1\74\1\103\1\104\1\77\1\26"+
    "\1\43\1\17\1\51\1\52\1\26\1\45\1\31\1\33\2\26\1\36"+
    "\1\47\1\35\1\26\1\34\1\60\1\46\1\30\1\32\1\37\1\26"+
    "\1\50\1\44\2\26\1\104\1\40\2\104\1\75\1\104\1\14\1\54"+
    "\1\7\1\62\1\57\1\12\1\63\1\22\1\61\1\13\1\56\1\24"+
    "\1\23\1\11\1\10\1\16\1\67\1\55\1\6\1\20\1\65\1\15"+
    "\1\64\1\21\1\64\1\26\1\76\1\104\1\76\1\104\6\0\1\71"+
    "\u1fa2\0\2\71\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\14\0\1\1\1\2\2\3\5\4\1\5\1\6\1\7"+
    "\3\4\2\10\1\4\2\11\2\12\13\13\2\14\1\4"+
    "\1\15\3\4\7\0\1\16\4\0\1\2\17\0\1\17"+
    "\1\20\2\0\1\21\1\0\1\21\12\0\1\17\1\0"+
    "\1\21\2\22\2\0\2\23\2\0\2\23\1\0\1\23"+
    "\1\0\2\23\2\0\2\23\1\0\1\23\1\0\1\24"+
    "\1\25\1\26\1\27\3\0\1\30\1\0\1\31\1\0"+
    "\1\32\1\0\1\20\1\33\1\34\1\35\1\24\1\36"+
    "\1\21\1\17\1\37\1\36\1\40\1\41\1\42\1\13"+
    "\1\26\2\0\1\43\13\0\1\44\1\0\1\45\10\0"+
    "\1\23\1\46\2\0\1\23\1\47\2\23\2\0\2\23"+
    "\1\0\1\23\10\0\1\50\2\0\1\23\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u033c"+
    "\0\u040b\0\u0450\0\u0495\0\u04da\0\u033c\0\u033c\0\u033c\0\u033c"+
    "\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u033c\0\u0633\0\u0678\0\u033c"+
    "\0\u06bd\0\u033c\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0702\0\u0450"+
    "\0\u0747\0\u0495\0\u04da\0\u078c\0\u0564\0\u07d1\0\u033c\0\u0816"+
    "\0\u033c\0\u085b\0\u08a0\0\u08e5\0\u040b\0\u092a\0\u096f\0\u0450"+
    "\0\u09b4\0\u09f9\0\u0a3e\0\u033c\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52"+
    "\0\u033c\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35"+
    "\0\u0d7a\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u033c\0\u154b\0\u1590"+
    "\0\u040b\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u0450\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956"+
    "\0\u199b\0\u19e0\0\u033c\0\u033c\0\u033c\0\u033c\0\u1a25\0\u1a6a"+
    "\0\u1aaf\0\u033c\0\u1af4\0\u033c\0\u1b39\0\u040b\0\u1b7e\0\u040b"+
    "\0\u040b\0\u040b\0\u040b\0\u040b\0\u040b\0\u040b\0\u040b\0\u040b"+
    "\0\u1bc3\0\u033c\0\u1c08\0\u1c4d\0\u1bc3\0\u040b\0\u1c92\0\u1cd7"+
    "\0\u040b\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u19e0\0\u2013\0\u033c\0\u2058"+
    "\0\u209d\0\u20e2\0\u2127\0\u08a0\0\u216c\0\u21b1\0\u21f6\0\u165f"+
    "\0\u1e75\0\u223b\0\u2280\0\u1887\0\u033c\0\u1b7e\0\u22c5\0\u230a"+
    "\0\u234f\0\u2394\0\u23d9\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532"+
    "\0\u2577\0\u25bc\0\u2601\0\u2646\0\u268b\0\u033c\0\u26d0\0\u2715"+
    "\0\u234f\0\u268b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\15\1\16\1\17\1\20\2\21\17\22\1\23\1\22"+
    "\1\21\10\22\1\24\2\25\10\22\1\25\12\22\1\25"+
    "\1\22\1\25\1\15\1\16\1\15\1\25\1\21\2\25"+
    "\1\26\1\16\1\27\1\30\1\25\1\15\1\16\1\17"+
    "\1\20\1\21\1\31\17\22\1\23\1\22\1\21\10\22"+
    "\1\32\1\25\1\33\10\22\1\25\12\22\1\25\1\22"+
    "\1\25\1\15\1\16\1\15\1\25\1\21\2\25\1\26"+
    "\1\16\1\27\1\30\1\25\1\15\1\16\1\34\1\35"+
    "\2\21\17\22\1\23\1\22\1\21\10\22\1\24\2\25"+
    "\10\22\1\25\12\22\1\25\1\22\1\25\1\15\1\16"+
    "\1\15\1\25\1\21\2\25\1\26\1\16\1\27\1\30"+
    "\1\25\1\15\1\16\1\34\1\35\1\21\1\36\17\22"+
    "\1\23\1\22\1\21\10\22\1\32\2\25\10\22\1\25"+
    "\12\22\1\25\1\22\1\25\1\15\1\16\1\15\1\25"+
    "\1\21\2\25\1\26\1\16\1\27\1\30\1\25\1\15"+
    "\1\16\1\37\1\40\2\21\17\22\1\23\1\22\1\21"+
    "\10\22\1\24\2\25\10\22\1\25\12\22\1\25\1\22"+
    "\1\25\1\15\1\16\1\15\1\25\1\21\2\25\1\26"+
    "\1\16\1\27\1\30\1\25\1\15\1\16\1\37\1\40"+
    "\1\21\1\36\17\22\1\23\1\22\1\21\10\22\1\32"+
    "\2\25\10\22\1\25\12\22\1\25\1\22\1\25\1\15"+
    "\1\16\1\15\1\25\1\21\2\25\1\26\1\16\1\27"+
    "\1\30\1\25\1\15\1\16\1\41\1\42\2\21\17\22"+
    "\1\23\1\22\1\21\10\22\1\24\2\25\10\22\1\25"+
    "\12\22\1\25\1\22\1\25\1\15\1\16\1\15\1\25"+
    "\1\21\2\25\1\26\1\16\1\27\1\30\1\25\1\15"+
    "\1\16\1\41\1\42\1\21\1\36\17\22\1\23\1\22"+
    "\1\21\10\22\1\32\2\25\10\22\1\25\12\22\1\25"+
    "\1\22\1\25\1\15\1\16\1\15\1\25\1\21\2\25"+
    "\1\26\1\16\1\27\1\30\1\25\1\43\1\44\1\45"+
    "\1\20\1\46\1\47\12\50\1\51\4\50\1\52\1\50"+
    "\1\46\10\50\1\53\2\43\10\50\1\43\12\50\1\43"+
    "\1\50\2\43\1\44\2\43\1\46\3\43\1\44\4\43"+
    "\1\44\1\45\1\20\1\46\1\54\12\50\1\51\4\50"+
    "\1\52\1\50\1\46\10\50\1\55\2\43\10\50\1\43"+
    "\12\50\1\43\1\50\2\43\1\44\2\43\1\46\3\43"+
    "\1\44\3\43\1\15\1\16\1\56\1\57\2\21\17\22"+
    "\1\23\1\22\1\21\2\22\1\60\5\22\1\24\2\25"+
    "\10\22\1\25\12\22\1\25\1\22\1\25\1\15\1\16"+
    "\1\61\1\25\1\21\2\25\1\26\1\16\1\27\1\30"+
    "\1\25\1\15\1\16\1\56\1\57\1\21\1\62\17\22"+
    "\1\23\1\22\1\21\2\22\1\60\5\22\1\32\2\25"+
    "\10\22\1\25\12\22\1\25\1\22\1\25\1\15\1\16"+
    "\1\61\1\63\1\64\2\25\1\26\1\16\1\27\1\30"+
    "\1\25\106\0\1\16\70\0\1\16\6\0\1\16\6\0"+
    "\1\20\105\0\1\65\1\66\17\65\1\0\12\65\3\0"+
    "\10\65\1\0\12\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\70\1\71\17\70\1\72\12\70\3\0"+
    "\10\70\1\0\12\70\1\0\1\70\5\0\1\70\1\0"+
    "\1\67\13\0\17\73\1\0\1\73\1\0\10\73\3\0"+
    "\10\73\1\0\12\73\1\0\1\73\21\0\1\74\5\0"+
    "\1\75\40\0\1\76\12\0\1\77\11\0\1\100\1\101"+
    "\7\0\1\65\1\102\1\103\1\104\1\65\1\105\1\106"+
    "\1\65\1\107\1\65\1\110\1\111\1\112\1\65\1\113"+
    "\1\114\1\115\1\0\2\65\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\124\1\125\1\126\2\0\1\127\2\65"+
    "\1\130\2\65\1\131\1\132\1\0\1\133\1\134\1\65"+
    "\1\115\1\65\1\135\1\136\3\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\74\5\0\1\75\40\0"+
    "\1\137\12\0\1\77\11\0\1\100\1\101\43\0\1\126"+
    "\47\0\1\35\105\0\1\65\1\66\1\103\1\104\1\65"+
    "\1\105\1\106\1\65\1\107\1\65\1\110\1\111\1\112"+
    "\1\65\1\113\1\114\1\115\1\0\2\65\1\140\1\117"+
    "\1\141\1\142\1\122\1\143\1\124\1\144\3\0\1\127"+
    "\2\65\1\130\2\65\1\131\1\132\1\0\1\133\1\134"+
    "\1\65\1\115\1\65\1\135\1\136\3\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\10\0\1\40\104\0\1\42"+
    "\103\0\1\145\1\146\1\65\1\66\17\65\1\0\12\65"+
    "\3\0\10\65\1\0\12\65\1\0\1\65\1\0\2\146"+
    "\2\0\1\65\1\0\1\67\11\0\1\70\1\71\6\70"+
    "\1\147\10\70\1\72\12\70\3\0\10\70\1\0\12\70"+
    "\1\0\1\70\5\0\1\70\1\0\1\67\7\0\1\145"+
    "\1\146\1\65\1\66\1\103\1\104\1\65\1\105\1\106"+
    "\1\65\1\107\1\65\1\110\1\111\1\112\1\65\1\113"+
    "\1\114\1\115\1\0\2\65\1\140\1\117\1\141\1\142"+
    "\1\122\1\143\1\124\1\144\3\0\1\127\2\65\1\130"+
    "\2\65\1\131\1\132\1\0\1\133\1\134\1\65\1\115"+
    "\1\65\1\135\1\136\3\65\1\0\1\65\1\0\2\146"+
    "\2\0\1\65\1\0\1\67\10\0\1\57\105\0\1\70"+
    "\1\71\17\70\1\72\12\70\3\0\10\70\1\0\12\70"+
    "\1\0\1\70\5\0\1\70\1\43\1\67\11\0\1\65"+
    "\1\66\1\103\1\104\1\65\1\105\1\106\1\65\1\107"+
    "\1\65\1\110\1\111\1\112\1\65\1\113\1\114\1\115"+
    "\1\0\2\65\1\140\1\117\1\150\1\142\1\122\1\143"+
    "\1\124\1\144\3\0\1\127\2\65\1\130\2\65\1\131"+
    "\1\132\1\0\1\133\1\134\1\65\1\115\1\65\1\135"+
    "\1\136\3\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\10\0\1\43\104\0\1\43\1\65\1\66\17\65\1\0"+
    "\12\65\3\0\10\65\1\0\12\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\65\1\66\1\151\1\152"+
    "\3\65\1\153\2\65\1\154\1\155\1\156\1\157\1\160"+
    "\2\65\1\0\2\65\2\151\6\65\3\0\10\65\1\0"+
    "\12\65\1\0\1\65\5\0\1\65\1\0\1\67\11\0"+
    "\21\161\1\0\12\161\3\0\10\161\1\0\12\161\1\0"+
    "\1\161\5\0\1\161\13\0\1\70\1\71\1\162\1\163"+
    "\3\70\1\164\2\70\1\165\1\166\1\167\1\170\1\171"+
    "\2\70\1\72\2\70\2\162\6\70\3\0\10\70\1\0"+
    "\12\70\1\0\1\70\5\0\1\70\1\0\1\67\13\0"+
    "\17\172\1\0\1\172\1\0\10\172\3\0\10\172\1\0"+
    "\12\172\1\0\1\172\21\0\21\73\1\72\12\73\3\0"+
    "\10\73\1\0\12\73\1\0\1\73\5\0\1\73\26\0"+
    "\1\173\13\0\1\174\1\175\6\0\1\176\2\0\1\175"+
    "\4\0\1\177\54\0\1\200\1\201\30\0\1\201\75\0"+
    "\1\202\4\0\1\203\31\0\3\204\1\0\101\204\4\0"+
    "\1\65\1\205\1\151\1\152\3\65\1\153\2\65\1\154"+
    "\1\155\1\156\1\157\1\160\2\65\1\0\2\65\2\151"+
    "\6\65\3\0\10\65\1\0\12\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\65\1\66\2\65\1\206"+
    "\5\65\1\207\6\65\1\0\12\65\3\0\10\65\1\0"+
    "\12\65\1\0\1\65\5\0\1\65\1\0\1\67\11\0"+
    "\1\65\1\66\17\65\1\0\12\65\3\0\10\65\1\0"+
    "\3\65\1\210\6\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\4\65\1\211\1\65\1\207"+
    "\5\65\1\207\2\65\1\0\12\65\3\0\10\65\1\0"+
    "\3\65\1\207\6\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\12\65\1\207\4\65\1\0"+
    "\12\65\3\0\10\65\1\0\5\65\1\212\4\65\1\0"+
    "\1\65\5\0\1\65\1\0\1\67\11\0\1\65\1\66"+
    "\17\65\1\0\12\65\3\0\10\65\1\0\6\65\1\207"+
    "\3\65\1\0\1\65\5\0\1\65\1\0\1\67\11\0"+
    "\1\65\1\66\1\207\2\65\1\207\12\65\1\207\1\0"+
    "\12\65\3\0\10\65\1\0\12\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\65\1\66\17\65\1\0"+
    "\12\65\3\0\5\65\1\213\1\214\1\65\1\0\12\65"+
    "\1\0\1\65\5\0\1\65\1\0\1\67\11\0\1\65"+
    "\1\66\6\65\1\207\10\65\1\0\12\65\3\0\10\65"+
    "\1\0\3\65\1\207\1\65\1\207\4\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\11\0\1\65\1\66\17\65"+
    "\1\0\12\65\3\0\10\65\1\0\10\65\1\207\1\65"+
    "\1\0\1\65\5\0\1\65\1\0\1\67\11\0\1\65"+
    "\1\66\17\65\1\0\12\65\3\0\10\65\1\0\2\65"+
    "\1\210\7\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\11\0\1\65\1\66\16\65\1\207\1\0\12\65\3\0"+
    "\10\65\1\0\12\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\17\65\1\0\2\65\2\215"+
    "\2\65\1\210\3\65\3\0\1\216\3\65\1\217\3\65"+
    "\1\0\12\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\11\0\1\65\1\66\17\65\1\0\6\65\1\210\3\65"+
    "\3\0\10\65\1\0\12\65\1\0\1\65\5\0\1\65"+
    "\1\0\1\67\11\0\1\65\1\66\17\65\1\0\2\65"+
    "\1\220\1\215\2\65\1\210\1\65\1\215\1\65\3\0"+
    "\10\65\1\0\12\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\17\65\1\0\6\65\1\215"+
    "\3\65\3\0\2\217\1\65\1\217\2\65\1\214\1\65"+
    "\1\0\12\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\11\0\1\65\1\66\17\65\1\0\6\65\1\210\3\65"+
    "\3\0\6\65\1\210\1\65\1\0\12\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\11\0\1\65\1\66\17\65"+
    "\1\0\3\65\1\221\4\65\1\216\1\65\3\0\10\65"+
    "\1\0\12\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\11\0\1\65\1\66\17\65\1\0\6\65\1\210\3\65"+
    "\3\0\2\65\1\216\3\65\1\214\1\65\1\0\12\65"+
    "\1\0\1\65\5\0\1\65\1\0\1\67\11\0\1\65"+
    "\1\66\17\65\1\0\3\65\1\215\4\65\1\216\1\65"+
    "\3\0\10\65\1\0\12\65\1\0\1\65\5\0\1\65"+
    "\1\0\1\67\46\0\1\222\47\0\1\65\1\66\17\65"+
    "\1\0\5\65\1\216\4\65\3\0\1\65\1\216\1\65"+
    "\1\216\2\65\1\214\1\65\1\0\12\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\11\0\1\65\1\66\17\65"+
    "\1\0\2\65\1\223\2\65\1\217\4\65\3\0\1\216"+
    "\5\65\1\214\1\224\1\0\12\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\65\1\66\17\65\1\0"+
    "\2\65\1\214\1\65\1\225\5\65\3\0\7\65\1\226"+
    "\1\0\12\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\11\0\1\65\1\66\17\65\1\0\12\65\3\0\7\65"+
    "\1\225\1\0\4\65\1\207\5\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\65\1\66\17\65\1\0"+
    "\12\65\3\0\10\65\1\0\1\65\1\210\10\65\1\0"+
    "\1\65\5\0\1\65\1\0\1\67\11\0\1\65\1\66"+
    "\12\65\1\207\2\65\1\207\1\65\1\0\12\65\3\0"+
    "\10\65\1\0\12\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\3\65\2\207\12\65\1\0"+
    "\12\65\3\0\10\65\1\0\3\65\1\207\3\65\1\207"+
    "\2\65\1\0\1\65\5\0\1\65\1\0\1\67\11\0"+
    "\1\65\1\66\1\207\16\65\1\0\12\65\3\0\10\65"+
    "\1\0\3\65\1\207\6\65\1\0\1\65\5\0\1\65"+
    "\1\0\1\67\30\0\1\200\1\201\27\0\1\227\1\201"+
    "\33\0\1\65\1\66\17\65\1\0\6\65\1\210\3\65"+
    "\3\0\1\216\3\65\1\217\3\65\1\0\12\65\1\0"+
    "\1\65\5\0\1\65\1\0\1\67\11\0\1\65\1\66"+
    "\17\65\1\0\2\65\1\220\3\65\1\210\3\65\3\0"+
    "\10\65\1\0\12\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\17\65\1\0\6\65\1\210"+
    "\3\65\3\0\2\217\1\65\1\217\2\65\1\214\1\65"+
    "\1\0\12\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\11\0\1\65\1\66\17\65\1\0\3\65\1\225\4\65"+
    "\1\216\1\65\3\0\10\65\1\0\12\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\11\0\1\65\1\66\17\65"+
    "\1\0\10\65\1\216\1\65\3\0\10\65\1\0\12\65"+
    "\1\0\1\65\5\0\1\65\1\0\1\67\10\0\1\146"+
    "\105\0\1\70\1\71\17\70\1\72\12\70\3\0\10\70"+
    "\1\0\1\230\11\70\1\0\1\70\5\0\1\70\1\0"+
    "\1\67\11\0\1\65\1\66\17\65\1\0\2\65\1\220"+
    "\3\65\1\210\3\65\3\0\7\65\1\231\1\0\12\65"+
    "\1\0\1\65\5\0\1\65\1\0\1\67\11\0\1\65"+
    "\1\66\2\65\1\232\5\65\1\233\6\65\1\0\12\65"+
    "\3\0\10\65\1\0\12\65\1\0\1\65\5\0\1\65"+
    "\1\0\1\67\11\0\1\65\1\66\6\65\1\234\10\65"+
    "\1\0\12\65\3\0\10\65\1\0\12\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\11\0\1\65\1\66\16\65"+
    "\1\151\1\0\12\65\3\0\10\65\1\0\12\65\1\0"+
    "\1\65\5\0\1\65\1\0\1\67\11\0\1\65\1\66"+
    "\11\65\1\151\5\65\1\0\12\65\3\0\10\65\1\0"+
    "\12\65\1\0\1\65\5\0\1\65\1\0\1\67\11\0"+
    "\1\65\1\66\13\65\1\235\3\65\1\0\12\65\3\0"+
    "\10\65\1\0\12\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\15\65\1\154\1\65\1\0"+
    "\12\65\3\0\10\65\1\0\12\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\65\1\66\12\65\1\236"+
    "\4\65\1\0\12\65\3\0\10\65\1\0\12\65\1\0"+
    "\1\65\5\0\1\65\1\0\1\67\11\0\1\161\1\237"+
    "\17\161\1\0\12\161\3\0\10\161\1\0\12\161\1\0"+
    "\1\161\5\0\1\161\13\0\1\70\1\71\2\70\1\240"+
    "\5\70\1\241\6\70\1\72\12\70\3\0\10\70\1\0"+
    "\12\70\1\0\1\70\5\0\1\70\1\0\1\67\11\0"+
    "\1\70\1\71\6\70\1\242\10\70\1\72\12\70\3\0"+
    "\10\70\1\0\12\70\1\0\1\70\5\0\1\70\1\0"+
    "\1\67\11\0\1\70\1\71\16\70\1\162\1\72\12\70"+
    "\3\0\10\70\1\0\12\70\1\0\1\70\5\0\1\70"+
    "\1\0\1\67\11\0\1\70\1\71\11\70\1\162\5\70"+
    "\1\72\12\70\3\0\10\70\1\0\12\70\1\0\1\70"+
    "\5\0\1\70\1\0\1\67\11\0\1\70\1\71\13\70"+
    "\1\243\3\70\1\72\12\70\3\0\10\70\1\0\12\70"+
    "\1\0\1\70\5\0\1\70\1\0\1\67\11\0\1\70"+
    "\1\71\15\70\1\165\1\70\1\72\12\70\3\0\10\70"+
    "\1\0\12\70\1\0\1\70\5\0\1\70\1\0\1\67"+
    "\11\0\1\70\1\71\12\70\1\244\4\70\1\72\12\70"+
    "\3\0\10\70\1\0\12\70\1\0\1\70\5\0\1\70"+
    "\1\0\1\67\11\0\2\172\17\245\1\72\12\245\3\0"+
    "\10\245\1\0\12\245\1\0\1\245\5\0\1\172\26\0"+
    "\1\246\146\0\1\74\112\0\1\247\47\0\1\250\56\0"+
    "\1\65\1\66\1\151\1\152\3\65\1\153\2\65\1\154"+
    "\1\155\1\156\1\157\1\160\2\65\1\0\2\65\2\151"+
    "\6\65\1\126\2\0\10\65\1\0\12\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\5\0\3\251\1\43\1\207"+
    "\1\252\17\207\1\251\12\207\3\251\10\207\1\251\12\207"+
    "\1\251\1\207\5\251\1\207\1\251\1\253\5\251\3\225"+
    "\1\0\101\225\3\223\1\0\101\223\3\224\1\0\101\224"+
    "\65\0\1\254\23\0\1\70\1\71\17\70\1\72\12\70"+
    "\3\0\10\70\1\255\12\70\1\0\1\70\5\0\1\70"+
    "\1\0\1\67\11\0\1\65\1\66\3\65\1\256\13\65"+
    "\1\0\12\65\3\0\10\65\1\0\12\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\11\0\1\65\1\66\10\65"+
    "\1\151\6\65\1\0\12\65\3\0\10\65\1\0\12\65"+
    "\1\0\1\65\5\0\1\65\1\0\1\67\11\0\1\65"+
    "\1\66\7\65\1\257\7\65\1\0\12\65\3\0\10\65"+
    "\1\0\12\65\1\0\1\65\5\0\1\65\1\0\1\67"+
    "\11\0\1\65\1\66\12\65\1\151\4\65\1\0\12\65"+
    "\3\0\10\65\1\0\12\65\1\0\1\65\5\0\1\65"+
    "\1\0\1\67\11\0\1\65\1\66\15\65\1\260\1\65"+
    "\1\0\12\65\3\0\10\65\1\0\12\65\1\0\1\65"+
    "\5\0\1\65\1\0\1\67\11\0\21\261\1\0\12\261"+
    "\3\0\10\261\1\0\12\261\1\0\1\261\5\0\1\261"+
    "\13\0\1\70\1\71\3\70\1\262\13\70\1\72\12\70"+
    "\3\0\10\70\1\0\12\70\1\0\1\70\5\0\1\70"+
    "\1\0\1\67\11\0\1\70\1\71\10\70\1\162\6\70"+
    "\1\72\12\70\3\0\10\70\1\0\12\70\1\0\1\70"+
    "\5\0\1\70\1\0\1\67\11\0\1\70\1\71\7\70"+
    "\1\263\7\70\1\72\12\70\3\0\10\70\1\0\12\70"+
    "\1\0\1\70\5\0\1\70\1\0\1\67\11\0\1\70"+
    "\1\71\12\70\1\162\4\70\1\72\12\70\3\0\10\70"+
    "\1\0\12\70\1\0\1\70\5\0\1\70\1\0\1\67"+
    "\11\0\1\70\1\71\15\70\1\264\1\70\1\72\12\70"+
    "\3\0\10\70\1\0\12\70\1\0\1\70\5\0\1\70"+
    "\1\0\1\67\55\0\1\173\57\0\1\265\61\0\3\251"+
    "\1\43\104\251\1\43\1\207\1\252\1\266\1\267\3\207"+
    "\1\270\2\207\1\271\1\272\1\273\1\274\1\275\2\207"+
    "\1\251\2\207\2\266\6\207\3\251\10\207\1\251\12\207"+
    "\1\251\1\207\5\251\1\207\1\251\1\253\10\251\1\43"+
    "\21\276\1\251\12\276\3\251\10\276\1\251\12\276\1\251"+
    "\1\276\5\251\1\276\7\251\3\277\1\0\101\277\4\0"+
    "\1\65\1\66\4\65\1\151\12\65\1\0\12\65\3\0"+
    "\10\65\1\0\12\65\1\0\1\65\5\0\1\65\1\0"+
    "\1\67\11\0\1\65\1\66\6\65\1\151\10\65\1\0"+
    "\12\65\3\0\10\65\1\0\12\65\1\0\1\65\5\0"+
    "\1\65\1\0\1\67\11\0\1\70\1\71\4\70\1\162"+
    "\12\70\1\72\12\70\3\0\10\70\1\0\12\70\1\0"+
    "\1\70\5\0\1\70\1\0\1\67\11\0\1\70\1\71"+
    "\6\70\1\162\10\70\1\72\12\70\3\0\10\70\1\0"+
    "\12\70\1\0\1\70\5\0\1\70\1\0\1\67\5\0"+
    "\3\251\1\43\1\207\1\252\2\207\1\300\5\207\1\301"+
    "\6\207\1\251\12\207\3\251\10\207\1\251\12\207\1\251"+
    "\1\207\5\251\1\207\1\251\1\253\10\251\1\43\1\207"+
    "\1\252\6\207\1\302\10\207\1\251\12\207\3\251\10\207"+
    "\1\251\12\207\1\251\1\207\5\251\1\207\1\251\1\253"+
    "\10\251\1\43\1\207\1\252\16\207\1\266\1\251\12\207"+
    "\3\251\10\207\1\251\12\207\1\251\1\207\5\251\1\207"+
    "\1\251\1\253\10\251\1\43\1\207\1\252\11\207\1\266"+
    "\5\207\1\251\12\207\3\251\10\207\1\251\12\207\1\251"+
    "\1\207\5\251\1\207\1\251\1\253\10\251\1\43\1\207"+
    "\1\252\13\207\1\303\3\207\1\251\12\207\3\251\10\207"+
    "\1\251\12\207\1\251\1\207\5\251\1\207\1\251\1\253"+
    "\10\251\1\43\1\207\1\252\15\207\1\271\1\207\1\251"+
    "\12\207\3\251\10\207\1\251\12\207\1\251\1\207\5\251"+
    "\1\207\1\251\1\253\10\251\1\43\1\207\1\252\12\207"+
    "\1\304\4\207\1\251\12\207\3\251\10\207\1\251\12\207"+
    "\1\251\1\207\5\251\1\207\1\251\1\253\10\251\1\43"+
    "\1\276\1\305\17\276\1\251\12\276\3\251\10\276\1\251"+
    "\12\276\1\251\1\276\5\251\1\276\7\251\70\0\1\306"+
    "\14\0\3\251\1\43\1\207\1\252\3\207\1\307\13\207"+
    "\1\251\12\207\3\251\10\207\1\251\12\207\1\251\1\207"+
    "\5\251\1\207\1\251\1\253\10\251\1\43\1\207\1\252"+
    "\10\207\1\266\6\207\1\251\12\207\3\251\10\207\1\251"+
    "\12\207\1\251\1\207\5\251\1\207\1\251\1\253\10\251"+
    "\1\43\1\207\1\252\7\207\1\310\7\207\1\251\12\207"+
    "\3\251\10\207\1\251\12\207\1\251\1\207\5\251\1\207"+
    "\1\251\1\253\10\251\1\43\1\207\1\252\12\207\1\266"+
    "\4\207\1\251\12\207\3\251\10\207\1\251\12\207\1\251"+
    "\1\207\5\251\1\207\1\251\1\253\10\251\1\43\1\207"+
    "\1\252\15\207\1\311\1\207\1\251\12\207\3\251\10\207"+
    "\1\251\12\207\1\251\1\207\5\251\1\207\1\251\1\253"+
    "\10\251\1\43\21\312\1\251\12\312\3\251\10\312\1\251"+
    "\12\312\1\251\1\312\5\251\1\312\12\251\1\43\1\207"+
    "\1\252\4\207\1\266\12\207\1\251\12\207\3\251\10\207"+
    "\1\251\12\207\1\251\1\207\5\251\1\207\1\251\1\253"+
    "\10\251\1\43\1\207\1\252\6\207\1\266\10\207\1\251"+
    "\12\207\3\251\10\207\1\251\12\207\1\251\1\207\5\251"+
    "\1\207\1\251\1\253\5\251";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10074];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\14\0\1\11\2\1\1\11\4\1\4\11\4\1\1\11"+
    "\2\1\1\11\1\1\2\11\13\1\1\11\1\1\1\11"+
    "\3\1\7\0\1\11\4\0\1\11\17\0\2\1\2\0"+
    "\1\1\1\0\1\1\12\0\1\1\1\0\2\1\1\11"+
    "\2\0\2\1\2\0\2\1\1\0\1\1\1\0\2\1"+
    "\2\0\2\1\1\0\1\1\1\0\4\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\1\1\0\12\1\1\11\4\1"+
    "\2\0\1\1\13\0\1\1\1\0\1\11\10\0\2\1"+
    "\2\0\1\1\1\11\2\1\2\0\2\1\1\0\1\1"+
    "\10\0\1\11\2\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[202];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int p;
  int span;
  int div;

  @Override
  public void write(Writer out) throws IOException {
        p = 0;
        span = 0;
        div = 0;
        yyline++;
        this.out = out;
        while(yylex() != YYEOF) {
        }
  }

  // TODO move this into an include file when bug #16053 is fixed
  @Override
  protected int getLineNumber() { return yyline; }
  @Override
  protected void setLineNumber(int x) { yyline = x; }
  
  // Q&D methods to asure well-formed documents
  protected void closePara() throws IOException {
      if (p > 0) {
          out.write("</p>");
          p--;
      }
  }
  protected void closeSpan() throws IOException {
      if (span > 0) {
          out.write("</span>");
          span--;
      }
  }
  protected void closeDiv() throws IOException {
      if (div > 0) {
          out.write("</div>");
          div--;
      }
  }
  protected void openPara() throws IOException {
      out.write("<p>");
      p++;
  }
  protected void openSpan(char cssClass) throws IOException {
      out.write("<span class=\"");
      out.write(cssClass);
      out.write("\">");
      span++;
  }

  protected void openDiv(String cssClass) throws IOException {
      out.write("<div class=\"");
      out.write(cssClass);
      out.write("\">");
      div++;
  }
  
  protected void cleanup() {
    try {
        while (span > 0) {
            closeSpan();
        }
        while (p > 0) {
            closePara();
        }
    } catch (IOException e) {
        // nothing we can do here
    }
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TroffXref(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TroffXref(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
        cleanup();
    try {
        while (div > 0) {
            closeDiv();
        }
    } catch (IOException e) {
        // nothing we can do here
    }

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 25: 
          { out.write(yycharat(yylength() - 1));
          }
        case 41: break;
        case 32: 
          { yybegin(COMMENT);openSpan('c');
          }
        case 42: break;
        case 29: 
          { yybegin(BOLD); openSpan('k');
          }
        case 43: break;
        case 6: 
          { out.write( "&lt;");
          }
        case 44: break;
        case 40: 
          { char tab = yycharat(4);
          }
        case 45: break;
        case 20: 
          { openSpan('k');
          }
        case 46: break;
        case 30: 
          { yybegin(HEADER); cleanup(); openDiv("b");
          }
        case 47: break;
        case 36: 
          { out.write(Util.breadcrumbPath(urlPrefix+"path=",yytext(),'/'));
          }
        case 48: break;
        case 4: 
          { out.write(yycharat(0));
          }
        case 49: break;
        case 10: 
          { yybegin(YYINITIAL); closeSpan(); out.write(' '); yyline++;
          }
        case 50: break;
        case 38: 
          { writeEMailAddress(yytext());
          }
        case 51: break;
        case 5: 
          { out.write( "&amp;");
          }
        case 52: break;
        case 26: 
          { out.write(".so ");
          }
        case 53: break;
        case 15: 
          { yybegin(BOLD); openSpan('s');
          }
        case 54: break;
        case 31: 
          { cleanup(); yybegin(TBL);out.write("<table rules=\"all\"><tr><td>");
          }
        case 55: break;
        case 17: 
          { yybegin(BOLD); openSpan('b');
          }
        case 56: break;
        case 13: 
          { cleanup(); out.write("</td><td>");
          }
        case 57: break;
        case 21: 
          { openSpan('s');
          }
        case 58: break;
        case 23: 
          { openSpan('b');
          }
        case 59: break;
        case 37: 
          { out.write('"');
          }
        case 60: break;
        case 22: 
          { closeSpan();
          }
        case 61: break;
        case 9: 
          { yybegin(YYINITIAL); closeSpan(); out.write("<br/>"); yyline++;
          }
        case 62: break;
        case 1: 
          { writeUnicodeChar(yycharat(0));
          }
        case 63: break;
        case 7: 
          { out.write( "&gt;");
          }
        case 64: break;
        case 18: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { yybegin(TBLL);
          }
        case 65: break;
        case 8: 
          { yybegin(YYINITIAL); cleanup(); closeDiv(); yyline++;
          }
        case 66: break;
        case 39: 
          { out.write("<sup>TM</sup> ");
          }
        case 67: break;
        case 12: 
          { cleanup(); out.write("</td></tr><tr><td>"); yyline++;
          }
        case 68: break;
        case 27: 
          { closePara(); out.write("<pre>");
          }
        case 69: break;
        case 3: 
          { out.write("\n"); yyline++;
          }
        case 70: break;
        case 2: 
          { out.write(' ');
          }
        case 71: break;
        case 33: 
          { cleanup(); openDiv("rs"); openPara();
          }
        case 72: break;
        case 28: 
          { cleanup(); out.write("</pre>");
          }
        case 73: break;
        case 16: 
          { cleanup();
    openPara();
          }
        case 74: break;
        case 24: 
          { out.write("&reg; ");
          }
        case 75: break;
        case 19: 
          { String path = yytext();
        out.write("<a href=\""+urlPrefix+"path=");
        out.write(path);
        appendProject();
        out.write("\">");
        out.write(path);
        out.write("</a>");
          }
        case 76: break;
        case 35: 
          { yybegin(YYINITIAL); cleanup(); out.write("</td></tr></table>");
          }
        case 77: break;
        case 14: 
          { out.write('-');
          }
        case 78: break;
        case 34: 
          { cleanup(); closeDiv();
          }
        case 79: break;
        case 11: 
          { 
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
